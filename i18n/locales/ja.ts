const translations = {
  shared: {
    next: `続ける`,
    start: `開始`,
    copy: `コピー`,
    info: `情報`,
    copy_acknowledged: `コピーしました！`,
    about: `このプロジェクトについて`,
    chapter: `章`,
    chapters: `章一覧`,
    challenge: `チャレンジ`,
    challenges: `チャレンジ一覧`,
    coming_soon: `近日公開`,
    start_chapter: `章を始める`,
    back: `戻る`,
    end: `終了`,
    close: `閉じる`,
    poweroff: `章の選択へ戻る`,
    loading: `読み込み中`,
    bitcoin_dev_project: `Bitcoin開発プロジェクト`,
  },
  ///ABOUT PAGE
about: {
  title: `このプロジェクトについて`,
  mobile_title: `Saving Satoshi（サトシを救え）とは`,
  subtitle: `2139年。最後のビットコイン採掘まであと2週間。数か月にわたり、サトシ・スクエアではカウントダウンの時計が時を刻んでいる。`,
  intro: `世界がこの歴史的な瞬間を待ちわびる中、ネットワークが突然停止する。<br><br>あなたの時計「Everything Watch」には、「サトシ・ナカモト」と名乗る誰かから、WhiskerWareブランドのホロキャットが届く。（他のeホログラムと似ているが、これは猫の形をしている。）<br>あなたが鼻をちょんと押すと、ホロキャットが現れる。`,

project: {
  title: `ビットコインは奥深いもの。でも、学び方は堅苦しくなくてもいい。`,
  paragraph_one: `Saving Satoshi は、ビットコイン技術をテーマにした、気軽に楽しめるインタラクティブ（双方向的）なロールプレイングゲーム（RPG）です。物語仕立てのストーリーとゲーム要素、そしてちょっとユニークな課題を組み合わせて、ビットコイン開発の学びを楽しく始められるようにしています。`,
  paragraph_two: `このゲームは、ビットコインが<span className="italic">本当に</span>どう動いているのかを知りたい人や、好奇心旺盛なプログラマーのために、楽しみながら学べるよう設計されています。ビットコインのオープンソースソフトウェア（₿OSS）に魅了され、貢献したいと考えている人にぴったりです。`,
  paragraph_three: `各章には、コードを使ったレッスンコンテンツ、シミュレーション、プログラミング演習が含まれており、ビットコイン技術の奥深い仕組みを楽しく学べるよう工夫されています。`,
  paragraph_four: `シンプルでわかりやすい例から始まり、段階的に複雑になっていきます。臨場感のあるユーザー体験、豊かなビジュアル、そしてシームレスな操作を通じて、プレイヤーは次のようなさまざまなトピックを旅していきます：`,
  chapter_topics: {
    list_one: `ジェネシスブロックに隠された秘密のメッセージを探し、解読する`,
    list_two: `ハッシュ関数とプルーフ・オブ・ワーク`,
    list_three: `プールマイニングの仕組み`,
    list_four: `楕円曲線暗号の基礎と、公開鍵・秘密鍵のペアからアドレスを導出する方法`,
    list_five: `ECDSAでの署名と検証`,
    list_six: `トランザクションを一から構築する`,
    list_seven: `複数のトランザクションを集めてブロックテンプレートを作る`,
    list_eight: `Bitcoin Core の RPC API を使ってブロック報酬を計算する`,
    list_nine: `ビットコインスクリプト`,
    list_ten: `Lightning Networkの仕組み`,
  },
  paragraph_five: `でも、このゲームは単なるカリキュラムではありません。ビットコインの教育も、その技術と同じくらい創造的でユニークであるべきだと、私たちは考えています。だからこそ、このゲームでは、文化・歴史・デザインといったビットコインの魅力的な側面にも触れています。`,
  paragraph_six: `私たちは、ビットコインは世界にとってポジティブな力だと信じています。このプロジェクトは、情熱的な貢献者たちによって最高の基準で作られており、100％無料・オープンソース（FOSS）です。Saving Satoshi の制作背景についてもっと知りたい方は、<Link href="https://bitcoin.design/guide/case-studies/saving-satoshi" className="underline" target="_blank">Bitcoin Design Guide のケーススタディ</Link>をご覧ください。`,
  paragraph_seven: `ゲームをプレイすることから、ワークショップの開催、コードの貢献まで、Saving Satoshi コミュニティに参加する方法はさまざまです。あなたの参加を心から歓迎します。<Link href="https://github.com/saving-satoshi/saving-satoshi" className="underline" target="_blank">GitHub の Saving Satoshi</Link>をフォローしたり、<Link href="https://discord.gg/eBGRaCSjg5" className="underline" target="_blank">Bitcoin Design コミュニティの Discord</Link>内 #saving-satoshi チャンネルに参加して、ぜひご連絡ください。`,
  paragraph_eight: `また、<Link href="https://x.com/savingsatoshi" className="underline" target="_blank">X</Link>、<Link href="https://njump.me/npub1vy6wcgw6jhhtcmpawvlnsfx7g8qt8r40z7qlks9zwa4ed57vm5eqx527hr" className="underline" target="_blank">nostr</Link>、<Link href="https://bsky.app/profile/bitcoindevs.bsky.social" className="underline" target="_blank">Bluesky</Link>でもつながることができます。メンションや感想をいただけるととてもうれしいです！`,
},

contributing: {
  title: `貢献するには`,
  paragraph_one: `Saving Satoshi はオープンソースプロジェクトです。誰でも自由に参加し、一緒に作り上げることができます。`,

  feedback: {
    title: `フィードバック`,
    paragraph_one: `あなたの声を聞かせてください！良かった点、気になった点、改善できそうな点など、どんなことでも歓迎です。<a href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform" target="_blank" rel="noreferrer">こちらのフォーム</a>から送信できます。`,
  },

  contribute: {
    title: `貢献する`,
    paragraph_one: `どんな提案も大歓迎です。コードのレビューや品質チェック（QA）を手伝ってくれる方も常に募集中です。コードの改善提案があれば、<a href="https://github.com/saving-satoshi/saving-satoshi" target="_blank" rel="noreferrer">GitHub</a>で issue を立てたり、Pull Request を送ったりしてください。`,
    paragraph_two: `デザインやストーリー、その他何らかの形で関わりたい方は、<a href="https://discord.gg/B9WURkwF" target="_blank" rel="noreferrer">Bitcoin Design Discord</a>内の #saving-satoshi チャンネルにご参加ください。やりたいことを伝えていただければ、サポートします。`,
  },
},

privacy: {
  title: `プライバシーへの取り組み`,
  paragraph_one: `Saving Satoshi では、ユーザーのプライバシーとセキュリティの確保に全力で取り組んでいます。私たちは透明性を信条としており、アプリの利用状況をどのように、なぜ計測しているのかを知っていただきたいと考えています。そのために、<Link href="https://umami.is/" className="underline" target="_blank">Umami</Link> という強力なツールを使用しています。`,
  sub_heading_one: `Umami とは？`,
  paragraph_two: `Umami はオープンソースの解析プラットフォームで、アプリの利用状況を把握するための重要なインサイトを提供してくれます。これにより、データに基づいた判断を行い、アプリをより使いやすく、ユーザーフレンドリーで安全なものへと改善し続けることができます。Umami のダッシュボードは<Link className="underline" href="https://visits.bitcoindevs.xyz/share/zFmD5WIus09mDxEf/Saving%20Satoshi" target="_blank">こちら</Link>で公開しています。`,
  sub_heading_two: `収集するデータは？`,
  paragraph_three: `ご安心ください。私たちが収集するのは、個人を特定しない匿名化されたデータのみです。具体的には次のような目的で活用しています：`,
  list_item_one_title: `プロダクト改善：`,
  list_item_one_text: `アプリのどこを改良すればよいかを把握し、より効率的で使いやすく、安全なものにするためにデータを利用します。`,
  list_item_two_title: `互換性向上：`,
  list_item_two_text: `ユーザーがどのデバイスやプラットフォームを使っているかを理解し、さまざまな環境でアプリがスムーズに動作するように最適化します。`,
  sub_heading_three: `あなたのプライバシーが最優先`,
  paragraph_four: `個人を特定できる情報は一切収集せず、データはアプリ改善の目的のみに使用されます。第三者に共有・販売することは決してありません。`,
  paragraph_five: `データ収集やプライバシーポリシーについてご不安やご質問がある場合は、いつでもお気軽にご連絡ください。私たちは透明性と安全性をもって、安心してご利用いただける体験を提供します。`,
},

contributors: {
  title: `ぜひお楽しみください！`,
  paragraph_one: `Saving Satoshi は、過去数年間にわたる、多くの人々の協力なしには実現できませんでした。まさに「村全体」で取り組んできた成果と言えます！`,
  paragraph_two: `コアチームは、<Link href="https://adamjonas.com/" className="underline" target="_blank">Adam Jonas</Link>、<Link href="https://www.germanysbestkeptsecret.com/" className="underline" target="_blank">Christoph Ono</Link>（デザインリード）、<Link href="https://satsie.dev/" className="underline" target="_blank">Satsie</Link>、<Link href="https://github.com/benalleng" className="underline" target="_blank">BenAllenG</Link>（エンジニアリングリード）、<Link href="https://github.com/pinheadmz" className="underline" target="_blank">Matthew Zipkin</Link>（レッスンコンテンツリード）、<Link href="https://x.com/TuedonTuoyo" className="underline" target="_blank">Tuedon Tuoyo</Link>、<Link href="https://www.artassoiants.com/" className="underline" target="_blank">Art Assoiants</Link>（プロダクトマネージャー）、そして物語執筆のために <Link href="https://spiral.xyz/" className="underline" target="_blank">Spiral</Link> からお借りした 4 匹の謎めいた猫たちで構成されています。`,
  paragraph_three: `そのほかにも、多くの貢献者がさまざまな場面で重要な役割を果たしてくれました。ここでご紹介するのはその一部ですが、 <Link href="https://x.com/ecurrencyhodler" className="underline" target="_blank">ecurrencyhodler</Link>、<Link href="https://www.jtwoodhouse.com/" className="underline" target="_blank">JT Woodhouse</Link>、<Link href="https://x.com/_Jsms_" className="underline" target="_blank">JSMS</Link>、<Link href="https://github.com/afterburn" className="underline" target="_blank">Kevin Karsopawiro</Link>、<Link href="https://github.com/daviroo" className="underline" target="_blank">daviroo</Link>、<Link href="https://github.com/nully0x" className="underline" target="_blank">nully0x</Link>、<Link href="https://github.com/vinayaksh42" className="underline" target="_blank">Vinayak Sharma</Link>、<Link href="https://github.com/shaavan" className="underline" target="_blank">Shashwat Vangani</Link>、<Link href="https://github.com/aureleoules" className="underline" target="_blank">Aurèle Oulès</Link>、<Link href="https://github.com/sabakhilji" className="underline" target="_blank">sabakhilji</Link> などが挙げられます（順不同）。`,
  paragraph_four: `コード貢献者の全リストは、<Link href="https://github.com/saving-satoshi/saving-satoshi/graphs/contributors" className="underline" target="_blank">GitHub</Link> でご覧いただけます。`,
},

satoshi_needs_you: `さあ、急いで！ サトシがあなたを必要としています。`,
},

///CHAPTERS TITLE PAGE
chapter_one: {
  title: `隠された秘密は目の前に`,
  paragraph_one: `時は2139年。最後のビットコインが採掘されるまで、あと2週間。サトシ・スクエアでは、何か月ものあいだカウントダウンの時計が時を刻んでいた。これまで、すべてのブロックにはビットコインの報酬、つまり新規発行報酬が存在していた。これは新しいビットコインが生成される唯一の方法だったが、それもまもなく終わる。100年以上にわたり続いてきたビットコインの発行スケジュールが、いよいよ終わりを迎える。世界は、最後の発行報酬付きブロックが採掘されるその瞬間を待ちわびている。時代の終わりを告げる歴史的イベントだ。`,
  paragraph_two: `突如として、ネットワークが停止する。`,

  ///CHAPTER 1
  intro_one: {
    title: `イントロ`,
    nav_title: `マイナーたちの抗議`,
    paragraph_one: `数秒後、あなたのホログラム画面が起動する。`,
    paragraph_two: `―― デボラ・チャンク：「トーマス・ヴァンダープールさん。エレガントな装いのあなたは、BitRey社のCEOとして、世界最大のビットコインマイニングプールを運営しています。さらに、マイニングマシンの製造も手がけています。今、一体何が起きているのですか？ビットコインは死にかけているのですか？」`,
    paragraph_three: `―― ヴァンダープール：「まずは順を追って説明しましょう。おほん、そうです、デボラ。我がヴァンダープール家――上品なスーツを完璧に着こなす私の父と、そのまた父――は、ブロック21,000からずっとマイニングを続けてきました。だからこそ、自信を持って言えるのです。世界中のマイナーたちがマシンの電源を切ることで、意図的に遅延を引き起こしています。これは抗議です。誰も、ビットコインの発行が2,100万枚で終わることを望んでいません。マイナーは手数料報酬だけでは生き残れませんから。」`,
    start: `続ける`,
  },

  intro_two: {
    title: `Genesis（はじまり）`,
    nav_title: `サトシのホロキャット`,
    paragraph_one: `あなたの「Everything Watch」に、「サトシ・ナカモト」と名乗る人物から WhiskerWare ブランドのホロキャットが届く。（他のeホログラムと似ているが、これは猫の形をしている。）あなたはその鼻をちょんと押して、ホロキャットを起動する。`,
    paragraph_two: `――「ビットコインは死んではいない。でも、君の助けが必要だ。猫のことを忘れないで。」 ―― サトシ・ナカモト`,
    paragraph_three: `―― サトシ？あのサトシ？あのホワイトペーパーの？いや、まさか。あの人はもう100年以上も前に死んだとされていたはず……`,
    paragraph_four: `……だったよね？`,
    paragraph_five: `ホロキャット：「さあ、今すぐ行動開始ニャ。手伝ってあげるけど、今すぐ始めないとダメにゃん。」`,
  },

  genesis_one: {
  title: `Genesis`,
  nav_title: `ジェネシスの秘密`,
  heading: `最初のチャレンジ`,
  paragraph_one: `ビットコインは検閲耐性のあるお金です。ネットワークにトランザクションをブロードキャスト（送信）することで、誰でも送金ができます。ブロードキャスト後、トランザクションはマイナーによってブロックにまとめられます。マイナーたちは、チェーン上にブロックを追加する権利を得るために互いに競い合います。この仕組みによって、ビットコインは非中央集権的に保たれているのです。`,
  paragraph_two: `ビットコインの匿名の発明者、サトシ・ナカモトは、最初のビットコインブロック（ジェネシスブロック）を採掘しました。そしてその最初のトランザクションの中に、世界への秘密のメッセージを残しました。あなたの最初のチャレンジは、それを見つけて解読することです。`,
},

genesis_two: {
  title: `Genesis`,
  nav_title: `メッセージを探せ`,
  heading: `隠されたメッセージを見つけよう`,
  paragraph_one: `ビットコインブロックチェーンの最初のブロックを探しましょう。下のボタンをクリックすると、ブロック番号0、いわゆるジェネシスブロックを<Tooltip id="genesis_two_paragraph_one" content="chapter_one.genesis_two.tooltip_block_explorer" theme="bg-[#30435b]">ブロックエクスプローラー</Tooltip>で開けます。`,
  paragraph_two: `下へスクロールし、このブロックに含まれている1つのトランザクションの詳細を展開します。“Coinbase” という入力を探してください。次に “SCRIPTSIG (<Tooltip id="genesis_two_paragraph_two" content="chapter_one.genesis_two.tooltip_hex" theme="bg-[#30435b]">HEX</Tooltip>)” というラベルを見つけましょう。その横に表示されている値が、暗号化されたメッセージです。`,
  paragraph_three: `その値をコピーして、コードブロックに貼り付けてください。`,
  tooltip_block_explorer: `<a  href="https://bitcoinops.org/en/topics/block-explorers/" target="_blank" rel="noreferrer">ブロックエクスプローラー</a>は、ビットコインのトランザクション情報をすばやく確認できる便利なツールです。`,
  tooltip_hex: `16を基数とする数値システムである「hexadecimal」（16進数）の略。`,
  view_block_0: `ブロック0を表示`,
  placeholder: `見つけた値をここに貼り付けてください`,
},

genesis_three: {
  title: `Genesis`,
  nav_title: `メッセージを解読せよ`,
  heading: `メッセージを解読しよう`,
  paragraph_one: `見つけたメッセージは「HEX」という形式でエンコードされています。これを私たちが読み取れる文字列（ASCII）に変換するコマンドを実行します。`,
  paragraph_two: `以下のコマンドをコードブロックのターミナルにコピー＆ペーストして、「Enter」キーを押してください。`,
  terminal_challenge_lines: `ここにコマンドを入力してEnterを押してください...\n 変数 $scriptSigHex はすでに定義されています。\n\n var $scriptSigHex = '04fff...e6b73'`,
  waiting_for_input: `あなたがスクリプトを書いて実行するのを待っています…`,
  success: `すばらしい！解読されたメッセージは、<Link href="https://en.bitcoin.it/wiki/Genesis_block" target="_blank" className="underline">The Times</Link>紙の2009年1月3日付の一面を引用していました。この日は、サトシがジェネシスブロックを採掘した日でもあります。なんてクールなのでしょう！<br><br>このメッセージから、サトシがビットコインを作ろうとした動機の一端がうかがえます。\n\nさあ、次に進みましょう。`,
},

genesis_four: {
  title: `Genesis`,
  nav_title: `初めての成功`,
  subtitle: `おめでとう！最初のチャレンジをクリアしました！`,
  paragraph_one: `あなたは、サトシ・ナカモトがジェネシスブロックに仕込んだ秘密のメッセージを発見しました。次のチャレンジでは、今回学んだことを踏まえ、物語にとって重要な手がかりを解き明かしましょう。`,
},

transacting_one: {
  title: `トランザクション`,
  nav_title: `トランザクションの中身とは？`,
  heading: `トランザクションの中身とは？`,
  paragraph_one: `トランザクションの主な構成要素は「インプット（入力）」と「アウトプット（出力）」の2つです。前のチャレンジでは、トランザクションのインプットに含まれていた秘密のメッセージを解読しました。今回は、アウトプット側に含まれているメッセージを解読していきます。`,
  paragraph_two: `次のトランザクションでは、「OP_RETURN」というタイプのアウトプットを特定してみましょう。`,
},

transacting_two: {
  title: `トランザクション`,
  nav_title: `OP_RETURNを探せ`,
  heading: `OP_RETURN`,
  paragraph_one: `トランザクションに秘密のメッセージを隠す方法は他にもあります。ビットコインには「OP_RETURN」と呼ばれる特殊なコードがあり、これを使ってトランザクションのアウトプットにメッセージを添付することができます。実際に探してみましょう。`,
  paragraph_two: `1. 特定のトランザクションを確認するには<Link href="https://blockstream.info/tx/ff9148605a772a51cba39004df5fb042d40515967a3e38ff5294cfd017c452a9" target="_blank" className="underline">こちら</Link>をクリックしてください。`,
  paragraph_three: `2. 詳細を開いて、「OP_RETURN」タイプの部分を探します。`,
  paragraph_four: `3. 次に「SCRIPTPUBKEY（ASM）」フィールドを見つけてください。「OP_RETURN OP_PUSHBYTES_33」という記述があるはずです。これらは「オペコード」と呼ばれますが、今回はその後に続くデータに注目します。`,
  paragraph_five: `4. 「OP_RETURN OP_PUSHBYTES_33」の後にある長い数字の文字列をコピーして、コードブロックに貼り付けてください。`,
  input_challenge_label: `OP_RETURNの値を入力`,
},

transacting_three: {
  title: `トランザクション`,
  nav_title: `OP_RETURNを解読`,
  heading: `もうひとつの秘密のメッセージ`,
  paragraph_one: `トランザクションのアウトプットの中にあるメッセージ部分を特定しました。`,
  paragraph_two: `あとは前のチャレンジと同じように、これを解読するだけです。もう一度このトランザクションを確認したい場合は<Link href="https://blockstream.info/tx/ff9148605a772a51cba39004df5fb042d40515967a3e38ff5294cfd017c452a9?expand" className="underline">こちら</Link>からどうぞ。`,
  terminal_challenge_success: `正解です！よくできました。\n\n ご覧のとおり、手がかりは「アドレス」でした。そのアドレスを見に行ってみましょう。\n\n 次のチャレンジがあなたを待っています。`,
  terminal_challenge_lines: `ここにコマンドを入力してEnterを押してください...\n\n コマンド：\n echo $scriptPubKeyBytes | xxd -r -p \n\n ※今回、$scriptPubKeyBytes は定義されていません。前のページでコピーした値を、そのままコマンドに使ってください。`,
  terminal_challenge_error: `惜しい！今回は $scriptPubKeyBytes という変数はあらかじめ定義されていませんよ。`,
},

outro_one: {
  title: `アウトロ（締めくくり）`,
  nav_title: `冒険のはじまり`,
  paragraph_one: `あなたはガレージに駆け下り、父の古いバジェットコプターに乗り込み、座標を入力して21地区へ向かう。`,
  paragraph_two: `ホログラムにも反応するほどの激しい猫アレルギーにもかかわらず、ホロキャットは同行してくる。あなたは抗議したが、猫はそういう生き物だ。`,
  button_text: `第1章を完了`,
},

outro_two: {
  title: `ミッション成功！`,
  nav_title: `チャプター完了`,
  description: `すばらしい！第1章をクリアし、ハッシュやトランザクションについて多くを学びました。楽しめましたか？`,
},

end: {
  save: `進行状況を保存する`,
  next: `保存せずに進む`,
  feedback: `フィードバックを送る`,
},
resources: {
  genesis_two: {
    scriptsig_heading: `ScriptSig`,
    scriptsig_paragraph: `'scriptSig' は新しいトランザクションの入力として提供されるスクリプトです。これはアンロックスクリプトとも呼ばれ、参照されたUTXO（未使用トランザクション出力）を使用する権限があることを証明します。'scriptSig' は入力フィールド内のデータです。`,
    block_explorer_heading: `ブロックエクスプローラー`,
    block_explorer_paragraph: `ブロックエクスプローラーは、ブロックチェーンネットワークを探索し理解するための重要なツールです。使いやすいインターフェースを通じて、ブロックチェーン上のデータを調査・分析できます。トランザクション履歴の確認、残高の閲覧、個々のブロックやトランザクションの進捗を追跡することが可能です。`,
    tip: `ブロック内のトランザクションを展開し、Coinbase入力の中にある「scriptSig(Hex)」カテゴリを探してください。`,
  },
  genesis_three: {
    bash_heading: `Bashコマンド`,
    bash_paragraph: `ジェネシスブロックにサトシが埋め込んだテキストの圧縮を元に戻すため、いくつかの基本的なBashコマンドとオプションを使用します。`,
    tip: `'xxd' コマンドの主な機能は、バイナリファイルを16進数に変換することです。'-r' オプションを付けると、逆の変換を行い、16進ダンプをバイナリに変換します。ASCII文字列の場合、このバイナリ形式は人間が読める形になります。'-p' オプションを使うと、プレーンなスタイルで出力が表示され、結果を読みやすくなります。`,
  },
  transacting_two: {
    transactions_heading: `トランザクション`,
    transactions_paragraph: `暗号通貨におけるトランザクションとは、ひとまとまりで実行される（途中で分割できない）支払い処理、いわば「原子的な（不可分な）」送金に相当します。ビットコインのようなUTXOベースの通貨では、既存のUTXO（未使用のトランザクション出力）を消費し、新しいUTXOを生成することで処理が行われます。誰かが暗号通貨のトランザクションを開始するということは、特定の量のコインを、あるウォレットから別のウォレットに送るようブロックチェーンに指示することです。ビットコインのようなUTXOベースの通貨では、このとき送信者の既存UTXOが消費され、受信者のために新しいUTXOが生成されることで、所有権台帳が更新されます。`,
    bitcoin_script_heading: `ビットコインスクリプト`,
    bitcoin_script_paragraph: `ビットコインスクリプトとは、ビットコイントランザクションで「どのような条件でビットコインが使えるか」を定義するための、スタックベースのシンプルなプログラミング言語です。各種「オペコード」（operation codeの略）を用いて、スクリプト内のデータに対して実行すべき処理を指定します。`,
    asm_heading: `ASM（アセンブリ形式）`,
    asm_paragraph: `scriptSig や scriptPubKey の隣に「ASM」と表示されている場合、それはその値が「アセンブリ形式」、つまりスクリプト命令のより人間に読みやすい形式であることを意味します。`,
    tip: `Op_Code「OP_Pushbytes_33」がある場合、OP_RETURNの中に33バイト（合計66文字）の文字列があるはずです。`,
  },
  transacting_three: {
    secrets_heading: `ビットコインに秘められた秘密`,
    secrets_paragraph: `前のチャレンジで見たように、ビットコインスクリプトに秘密を埋め込む文化は、ジェネシスブロックの時代から存在していました。情報をブロックチェーン上に保存したり、ビットコインの外の価値に関連付けたり、他人にメッセージを伝えたりするために、人々は入出力以外のデータもブロックチェーンに保存してきたのです。`,
    tip: `'xxd' コマンドで文字列を解読する際、今回は変数を使わないので、文字列全体をそのまま入力してください。`,
      },
    },
  },

chapter_two: {
  title: `ハッシュ化された計画`,
  paragraph_one: `サトシが教えてくれた座標は、残念ながら期待を裏切りません。そこは倉庫で、しかも不気味で寂れた場所です。`,
  paragraph_two: `あなたはバジェットコプターで倉庫を3周以上旋回する。やれやれ、やっぱり中に入るしかなさそうだ。バジェット熱探知機は、暗闇しか検知しない。この場所の存在を知っている者がいたとしても、記憶の中以外ではもう長らく訪れていないのだろう。`,

  intro_one: {
    title: `イントロ`,
    nav_title: `倉庫`,
    paragraph_one: `―ホロキャット：「なんてひどい場所ニャ。せめて電子アンチョビくらい置いてあってほしいニャ。サイバーキャットフードでも我慢するニャ…」`,
    paragraph_two: `あなたは着陸し、体勢を整えて、侵入口を探す。あそこにある壊れた窓が使えそうだ。レンガで窓の残骸を壊し、中に飛び込む。建物の中には、埃をかぶってはいるが保存状態のよいビットコインマイナーが何千台も並んでいた。`,
    paragraph_three: {
      a: `―ホロキャット：「ここは倉庫じゃなくて、博物館だニャ。たぶんヴァンダープール家の古いマイニング機器だと思うニャン。ビットコインの初期には、一般的なコンピュータを使ってマイニングしていたニャ。でも数年後、マイナーたちは特別なチップを搭載したマシンを使えることに気づいたニャ。それが、Application-Specific Integrated Circuit、つまり`,
      b: `、略してASICだニャン。このチップはひとつの目的――ビットコインのマイニングだけに特化してるニャ。そのおかげで効率が高く、マイナーはマイニングに費やすエネルギーを減らせるから有利ニャン。かつてはノートパソコンでマイニングしてたなんて信じられるかニャ？」`
    },
    paragraph_four: `このヴァンダープール家のコレクションに、これだけの機器があった理由がわかった。`,
    tooltip_one: {
      question: `ASICマイナーとは？`,
      link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520an%2520ASIC%2520miner%253F`,
      highlighted: `ASIC`,
    },
  },

  intro_two: {
    title: `ハッシュ化された計画`,
    nav_title: `コンピュータの起動`,
    paragraph_one: `隅には、かろうじて点滅している古いモニター付きのコンピュータがある。そこには「電源を入れろ、間抜けめ」と書かれたメモが貼ってある。`,
    paragraph_two: `―ホロキャット：「なんて失礼ニャ～。あっ、メカニカルキーボードだニャ。聞いたことあるニャン、あまりにうるさくて、ユーザーの聴力を奪うって噂されて、禁止されたらしいニャ」`,
    paragraph_three: `ホロキャットはキーボードの上に飛び乗り、キーの上を歩いて、押すべきキーを教えてくれる。`,
  },

hashing_one: {
  title: `ゼロ`,
  nav_title: `コンピュータがうなりを上げて起動する`,
  paragraph_one: `偶然なのか、それともホロキャットが本当に分かってやっていたのか、彼女が踏んだランダムな文字や数字は……別のランダムな文字や数字に変わっただけ？`,
  list_one: `> QX23Y6VGECTUKSNIEUTUB[P[pihof`,
  list_two: `> 1c31d1d9fb848a505fc0cdbea848ff1bdd46a9ed4d639d413d3a93035194eedf`,
  paragraph_two: `モニターには「ハッシュが間違っています。やり直してください」と表示されている。`,
  paragraph_three: `当然ながら、ホロキャットが入力したでたらめは正解ではなかった。彼女は生意気なホログラム猫にすぎないのだから！`,
  paragraph_four: `では、何か別のものを入力するとどうなる？`,
},

hashing_two: {
  title: `ゼロ`,
  nav_title: `何かをハッシュしてみよう`,
  heading: `何でも入力してみよう`,
  return_hash: `下に、入力内容がハッシュに変換された結果が表示されます`,
  progress_message: `続けてみよう…`,
  success_message: `よし、うまく遊べたね。それじゃ次に進もう。`,
},

hashing_three: {
  title: `ゼロ`,
  nav_title: `SHA256の威力`,
  heading: `ハッシュについて、何か気づいたことは？`,
  list_one: `ハッシュは指紋のように一つ一つが異なります。ごくまれな例外を除き、異なるものが同じハッシュになることはありません。`,
  list_two: `ハッシュ関数は一方通行です。ハッシュから元のデータを逆算することはできません。`,
  list_three: `ハッシュは非常に信頼性が高く、「決定論的」です。つまり、同じデータを何度ハッシュしても、必ず同じ結果が得られます。`,
  paragraph_one: {
    a: `ここで使われている関数は `,
    b: `という非常に人気のあるものです。`,
  },
  paragraph_two: `それでは、特定のハッシュを探してみましょう。`,
  paragraph_three: `ゼロ（“0”）で始まるハッシュを見つけてください。下にいろいろ入力して、目標のハッシュが出るまで試してみましょう。`,
  tooltip_one: {
    question: `SHA-256はビットコインでどのように使われているの？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=how%2520is%2520SHA-256%2520used%2520in%2520bitcoin%253F`,
    highlighted: `SHA-256`,
  },
},

hashing_four: {
  title: `ゼロ`,
  nav_title: `ゼロで始まるハッシュを探す`,
  heading: `ゼロ（“0”）で始まるハッシュが出るまで何か入力してみよう`,
  hint_prompt: `<Tooltip id="hint_prompt" position="bottom" theme="bg-[#5e212a]" offset="-1" content="chapter_two.hashing_four.hint_tooltip">ヒント</Tooltip>が必要？`,
  hint_tooltip: `<span className="text-m whitespace-nowrap leading-none text-white/50">試してみて：</span> <span className="whitespace-nowrap text-white">popcorn</span>`,
},

hashing_five: {
  title: `ゼロ`,
  nav_title: `難易度アップ`,
  heading: `そんなに難しくなかったね！`,
  paragraph_one: `もう少し難しくしてみよう。今度は、先頭がゼロ2つ（"00"）のハッシュを探してみて。`,
},

hashing_six: {
  title: `ゼロ`,
  nav_title: `ゼロ2つで始まるハッシュを探す`,
  heading: `ゼロ2つ（“00”）で始まるハッシュが出るまで何か入力してみよう`,
  hint_prompt: `<Tooltip id="hint_prompt" position="bottom" theme="bg-[#5e212a]" offset="-1" content="chapter_two.hashing_six.hint_tooltip">ヒント</Tooltip>が必要？`,
  hint_tooltip: `<span className="text-m whitespace-nowrap leading-none text-white/50">試してみて：</span> <span className="whitespace-nowrap text-white">trigonometry</span>`,
},

scripting_one: {
  title: `自動化`,
  nav_title: `ナンスをハッシュする`,
  heading: `これをコンピュータにやらせてみよう。`,
  paragraph_one: `おそらく、これにはかなり時間がかかったかもしれませんね。では、先頭が5個や10個のゼロで始まるハッシュを見つけることを想像してみてください。これこそが、マイナーが新しいブロックとトランザクションを提出する際に、ビットコインネットワークから課されるチャレンジです。`,
  paragraph_two: `マイナーは、前のブロックヘッダーのハッシュ、ブロックに含めたいトランザクションのハッシュ（コインベーストランザクションも含む）、時刻、そして「ナンス（nonce）」と呼ばれるランダムな数値など、ブロックに入れる情報を集めて、それらを組み合わせてハッシュ関数に入力し、「ブロックハッシュ」と呼ばれる値を生成します。`,
  paragraph_three: `ビットコインが最初に登場した頃、マイナーはブロックヘッダー内のナンス（32ビットのフィールド）を1ずつ増やしながら試していました。しかし、マイナーがより強力で効率的になるにつれて、難易度も上昇しました。やがて、32ビット内のすべての値を試しても、目標を満たすハッシュが1つも見つからないことが珍しくなくなりました。`,
  paragraph_four: `これに対応するため、マイナーはブロックヘッダーの他の部分、たとえば時刻や含まれるトランザクションを変更するようになりました。`,
  paragraph_five: `ビットコインネットワークには「難易度」という設定があり、一定数のゼロで始まるハッシュしかブロックとして受け付けません。この「難易度」は2016ブロックごとに調整されます。`,
  paragraph_six: `次のチャレンジでは、先頭が5つのゼロ（00000）で始まるハッシュを見つけるスクリプトを書いてください。`,
  tooltip_one: {
    question: `ターゲット難易度とは？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520is%2520target%2520difficulty%253F`,
    highlighted: `ターゲット難易度`,
  },
},

scripting_two: {
  title: `自動化`,
  nav_title: `ハッシュ関数を作る`,
  paragraph_one: `さあ、自分でコードを書いて動かす時です。先頭が5つのゼロ（"00000..."）で始まるSHA256ハッシュを生成するスクリプトを書きましょう。異なる入力でSHA256関数を何度も呼び出して、条件を満たすまで繰り返し試してください。ループ内で整数を増加させて、入力を変えてみるのがいいでしょう。暗号学ではこの数を「ナンス（nonce）」または「一度だけ使う数値」と呼ぶことがあります。`,
  python: {
    paragraph_two: `先頭が5つのゼロで始まるハッシュを見つけたら、そのナンスを関数から返してください。ここではPythonのhashlibライブラリを使って関数を作ります。必要であれば、以下の外部リソースも参考にしてください：`,
    list_one: `<Link href="https://docs.python.org/3/library/hashlib.html" target="_blank" className="underline">hashlib ドキュメント</Link>`,
    list_two: `<Link href="https://datagy.io/python-sha256/" target="_blank" className="underline">Python 関数チュートリアル</Link>`,
  },
  javascript: {
    paragraph_two: `先頭が5つのゼロで始まるハッシュを見つけたら、そのナンスを関数から返してください。ここではJavaScriptのcryptoライブラリを使って関数を作ります。必要であれば、以下の外部リソースも参考にしてください：`,
    list_one: `<Link href="https://www.geeksforgeeks.org/node-js-crypto-createhash-method/" target="_blank" className="underline">crypto ドキュメント</Link>`,
    list_two: `<Link href="https://www.educative.io/answers/what-is-node-cryptocreatehashalgorithm-options" target="_blank" className="underline">JavaScript 関数チュートリアル</Link>`,
  },
},

mining_one: {
  title: `採掘へ`,
  nav_title: `ブロックのマイニング`,
  heading_one: `マイニングの仕組みがわかったところで、実際に体験してみましょう`,
  heading_two: `あなたは今、マイニングをしています`,
  heading_three: `よくできました！`,
  heading_four: `100ブロックを目指そう`,
  heading_five: `達成しました！`,
  paragraph_one: `現在のビットコインネットワークでは、ブロックには先頭にゼロが10個並んだハッシュが必要です。さあ、始めましょう！`,
  paragraph_two: `このシンプルなシミュレーションでは、各ブロックに3,500件のトランザクションと、報酬・手数料として合計0.061 BTCが含まれていると仮定します。`,
  paragraph_two_one: `マイナーのスイッチを入れてみましょう。`,
  paragraph_three: `前のレッスンで書いた、何度もハッシュを計算するコードが実行されています。`,
  paragraph_four: `先頭にゼロが10個並んだハッシュが見つかると、自動的に停止します。`,
  paragraph_five: `ナンスの値がどんどん増えていくのが見えますか？ それは、今までに試したハッシュの回数を表しています！`,
  paragraph_six: `このときのナンスは：`,
  paragraph_seven: `そのときのハッシュは：`,
  paragraph_eight: `これは、新しいブロックに必要な「ゼロ10個」を満たしています。もう少しブロックをマイニングしてみましょう。`,
  paragraph_eight_one: `もう一度、マイナーのスイッチを入れてください。`,
  paragraph_nine: `少し時間がかかるかもしれません。でも、ブロックをマイニングしてトランザクションを承認するのがいかに大変か、よくわかります。`,
  paragraph_ten: `すごい！ これだけのハッシュ計算にはかなりの計算能力が必要でした。試されたナンスの数を見てください！ ハッシュパワー（1秒あたりに試せるハッシュの数）が増えたおかげで、ずいぶん助かりましたね。`,
  paragraph_eleven: `予想通り、各ブロックに3,500件のトランザクションが含まれていたため、100ブロックで合計35万件のトランザクションが承認されました。`,
  paragraph_twelve: `そして、このマイニングでしっかりと報酬も得られました！ ブロック報酬（ネットワークが各ブロックに支払うBTC）に加えて、トランザクション手数料という追加収入も受け取れるしくみになっています`,
  paragraph_thirteen: `ただし、これはあくまでシミュレーションです。実際のブロックは平均して10分ごとに生成されるものです。`,
  paragraph_fourteen: `さらに、もし本当にメインネットでマイニングをするなら、これらのブロックを掘るには現在の何万倍もの計算能力が必要です。`,
  progress_bar_title: `見つかったブロック`,
  progress_bar_one: `ナンス`,
  progress_bar_two: `ハッシュ／秒`,
  progress_bar_three: `承認されたトランザクション数`,
  progress_bar_four: `獲得したビットコイン`,
  button_hash: `10倍のハッシュパワーをください`,
  ten_x_hint: `ハッシュを加速するには「100x」ボタンをタップ！`,
},
outro_one: {
  title: `エンディング`,
  nav_title: `チャプター完了`,
  heading: `よくできました！`,
  paragraph_one: `機械たちが轟音を上げて動き出します。すべてが正常に作動しているようです。古いモニターに、世界中の他の倉庫の場所が表示されます。それらの倉庫にも、ヴァンダープール家の古いマイニング装置が設置されており、あなたがマイニングチャレンジを達成したときに起動したようです。`,
  paragraph_two: `—ホロキャット：「見て、メッセージだニャ」`,
  paragraph_three: `「よくやった。これでビットコインは10分に1ブロックのペースに戻るはずだ。」– サトシ・ナカモト`,
  paragraph_four: `また彼？`,
},
resources: {
  hashing_two: {
    hash_functions_heading: `ハッシュ関数`,
    hash_functions_paragraph: `ハッシュ関数とは、任意のサイズのデータを固定サイズの値に変換する関数のことです。ハッシュ関数から得られる値は、ハッシュ値、ハッシュコード、ダイジェスト、または単にハッシュと呼ばれます。通常は固定サイズのテーブル（ハッシュテーブル）を参照するために使われます。ハッシュテーブルの参照にハッシュ関数を使うことを、ハッシングまたは散在記憶方式と呼びます。`,
    tip: `どんどん入力してみよう！SHA-256アルゴリズムでは、似たような入力でもまったく異なるランダムなハッシュになります。`,
    spoiler: `8文字の単語を試してみて。`,
  },
  hashing_four: {
    power_of_random_heading: `ランダムの力`,
    power_of_random_paragraph: `完全にランダムな状況と同じように、SHA-256のハッシュ関数は新しいデータを追加するたびに完全にランダムな結果を返します。たとえば『戦争と平和』をハッシュしてから、たった1文字を追加するだけでも、まったく違うハッシュになります。1文字ごとにハッシュがランダムに変化するのです。16進数では使用される文字は16種類（0〜9とa〜f）なので、ハッシュが「0」で始まる確率はどのくらいでしょうか？`,
    tip: `計算してみよう！1桁ごとに16通りあるなら、「00」で始まる確率は？「000」では？`,
    spoiler: `文字「s」で始まる単語を試してみて。`,
  },
  hashing_six: {
    collision_resistance_heading: `SHA256と衝突耐性`,
    collision_resistance_paragraph: `SHA-256は256ビット（64文字）のハッシュ値を返します。これは入力データを一意に表すものです。SHA-256はMerkle–Damgård構造に基づいたハッシュ関数の一種で、これはシンプルな圧縮関数を繰り返し処理してハッシュ関数を構築する方法です。メッセージは固定サイズのブロックに分割され、それぞれのブロックが前の結果と結合されて処理されていき、最終的なハッシュ値が生成されます。この構造によりSHA-256は高いセキュリティ性と衝突耐性を持ち、現代の暗号技術においてデータの整合性や認証の基礎として広く使われています。`,
    tip: `このレッスンでは特にヒントはありません。Saving Satoshiが進むにつれて、少しずつ自分で解く力が求められるようになります。`,
    spoiler: `1文字加えるごとに完全に異なるハッシュができるので、「00」で始まるまで追加し続ける手もあります…あるいは「trigonometry」という単語を試しても。`,
  },
  scripting_one: {
    hash_libraries_heading: `ハッシュ関数`,
    hash_libraries_paragraph: `Node.jsのcryptoライブラリや、Pythonのhashlibライブラリは、ハッシュアルゴリズムを実用的なツールとして提供してくれるコードライブラリです。多くの人が大切なシステムの安全性をこれらに依存しているため、これらのライブラリは正確性とセキュリティを確保するために厳しく検証されています。`,
    nonce_heading: `ナンス`,
    nonce_paragraph: `ナンス（nonce）とは「一度だけ使われる数値」の略で、暗号処理や計算処理においてランダムまたは半ランダムに使われる数です。ナンスの主な目的は予測不可能性を与えることで、同じ操作や計算が繰り返し使われたり予測されたりしないようにすることです。ビットコインのマイニングにおいても重要な役割を果たしますが、詳しくは後ほど学びましょう…`,
    tip_one: `入力を正しくデコードしているか確認しましょう。ハッシュアルゴリズムはしばしばバイトで返しますが、ここでは16進数で読み取れるようにする必要があります！`,
    tip_two: `特定の値になるまで実行し続ける関数をどう作るか考えてみましょう。`,
    tip_three: `答えを必ず <span className="p-1 font-mono bg-[#0000004D] m-1">console.log()</span> または <span className="p-1 font-mono bg-[#0000004D] m-1">print()</span> で表示するようにしてください。これが唯一、IDEがあなたの答えを検証できる方法です。`,
  },
  mining_one: {
    mining_heading: `マイニング`,
    mining_paragraph: `マイニングはこれまで学んできたすべての概念が一つに集まる場所です。ビットコインのマイニングとは、新しいビットコインを発行し、トランザクションをブロックチェーンに追加するプロセスです。マイナーたちは各ブロックにおいて、有効で一意な「ナンス」を見つけるという複雑な数学的パズルを解くために競い合います。このプルーフ・オブ・ワークには膨大な計算力とエネルギーが必要ですが、これによって取引の正当性が保証され、ネットワーク全体の分散性と安全性が保たれています。成功したマイナーは新しく発行されたビットコインと、トランザクション手数料を報酬として受け取ります。`,
    difficulty_heading: `難易度`,
    difficulty_paragraph: `マイニングの難易度とは、ブロック生成の間隔を平均10分に保つために調整されるものです。`,
    spoiler: `ネタバレはなし！このレッスンを読み進めるだけで大丈夫です。これから先のレッスンで、あなたのマイニング知識を試す機会がたくさんあります！`,
     },
   },
 },    
chapter_three: {
  title: `51%攻撃`,
  paragraph_one: `あなたはブロックエクスプローラーのアドレスを入力し、ブロック生成が再び10分間隔に戻っていることを確認します。なお、ホロキャットは、大量のASICがうなりを上げているというのにぐっすり眠っています。`,
  paragraph_two: `まったく、ネコってやつは…`,
  paragraph_three: `でも、何かがおかしい。ブロックが空で、トランザクションが処理されていません。何かミスをした？偶然か？——そんな疑問が浮かぶ中、コンピュータの画面に新たなメッセージが表示され、ホロキャットが飛び起きます。`,
  paragraph_four: `偶然なんかじゃない。`,

  intro_one: {
    title: `イントロ`,
    nav_title: `ハッシュで対決`,
    paragraph_one: `—サトシ・ナカモト：「おい、そこのキミ！そう、キミだ！私のことを覚えているか？ビットコインが今、51%攻撃を受けてるぞ！キミがマイニング装置を起動させたあと、ヴァンダープールがBitReyのASICを再稼働させて、空のブロックばかりマイニングしているんだ。しかも問題は彼のマシンだけじゃない。標準のASICファームウェアに仕掛けられたバックドアを使って、既存のマイナーを感染させ、空のブロックしか掘れないようにするウイルスをばら撒いたんだ。奴はビットコインの供給量を増やすというアイデアを強引に支持させようとして、エコシステム全体を人質に取っている。何ボーっとしてるんだ、のんびり屋！」`,
    paragraph_two: `古いコンピュータが埃を吐き出しながら、「スプレッドシート」と呼ばれるデータの束を出力します。そこには主要なビットコインマイナーの連絡先と、ウイルス除去用のパッチが含まれていました。早くこのパッチを他のマイナーに届ければ、彼らは自分のマシンを取り戻して、あなたと一緒にBitReyと戦えるようになります。`,
    paragraph_three: `—ホロキャット：「また仕事が増えたニャ。…ま、やるのはキミだけどニャ。私は壁を駆け抜けてネズミでも脅かしてくるニャ〜」`,
  },

  solo_one: {
    title: `あなた vs. BitRey`,
    nav_title: `ひとりでマイニング`,
    step_zero_heading: `やってみよう`,
    step_zero_paragraph_one: `他のマイナーたちからの返事を待っている間に、BitReyを一人で食い止められるか試してみることにしました。もしかしたら、自分の力だけで空のブロックを止められるかもしれません。あなたのハッシュレートはこんな感じです。うまくいくと思いますか？`,
    step_one_heading: `競争開始`,
    step_one_paragraph_one: `BitReyと競いながら、100ブロック分のマイニングに挑戦します。あなたはいくつブロックを獲得できるでしょうか。`,
    step_two_heading: `うまくいかなかった！`,
    step_two_paragraph_one: `残念！BitReyとウイルスに支配されたマイナーに対抗するには、ハッシュパワーが全然足りない…。次の100ブロックでは、他のマイナーたちと力を合わせてBitReyを倒せるか試してみましょう。ビットコインは100年以上続いてきたんだ、そう簡単には倒れない。`,
  },

pool_one: {
  title: `プール vs. BitRey`,
  nav_title: `仲間を探そう`,
  waiting_screen_heading: `応援が必要だ！`,
  waiting_screen_paragraph_one: `倉庫のマイニング装置だけでは太刀打ちできません。他のマイナーたちとハッシュパワーを結集すれば、BitReyの猛攻に耐えられるかもしれません。`,
  waiting_screen_paragraph_two: `仲間が合流するのを待って、力を合わせましょう。`,
  waiting_button: `待機中…`,
  continue_button: `さあ行こう`,
},

pool_two: {
  title: `プール vs. BitRey`,
  nav_title: `協力してマイニング`,
  step_zero_heading: `いよいよ本番`,
  step_zero_paragraph_one: `他のマイナーとハッシュレートをプールすることで、BitReyに立ち向かえるでしょうか？`,
  step_two_heading: `またしても敗北！`,
  step_two_paragraph_one: `何かがおかしい。ブロックを見つけたのは「ハッシュレート・ホッパーズ」だけでした。なぜだと思いますか？`,
},

coop_one: {
  title: `協力 vs. BitRey`,
  nav_title: `何かがおかしい`,
  heading: `まだ何かがうまくいっていません。`,
  paragraph_one: `最もハッシュパワーを持つ「ハッシュレート・ホッパーズ」がすべてのブロックを見つけていて、他の仲間たちは何も見つけられていません。`,
  paragraph_two: `問題は、みんながマイニング中に同じナンスをチェックしていることです。どうすればもっと効率よく分担できるでしょうか？`,
  paragraph_three: `そこであなたは、ブロックデータを準備するときに各自の「extraNonce（エクストラナンス）」に固有の識別子を入れ、作業の重複を防ぐことにしました。`,
},

coop_two: {
  title: `協力 vs. BitRey`,
  nav_title: `extraNonceとは`,
  heading: `extraNonceって何？`,
  paragraph_one: `Stratumというマイニングプール用プロトコル（ビットコインの本体プロトコルではない）では、コインベーストランザクションに「extraNonce（エクストラナンス）」と呼ばれるデータがあります。マイニングプールがブロックデータをマイナーに配布する際、このextraNonceは「extranonce1」と「extranonce2」に分けて使われます。`,
  paragraph_two: `extraNonceを2つに分けることで、以下のような利点があります：`,
  list_one: `プール参加者同士が同じ作業をするのを防げます。`,
  list_two: `全員に同じトランザクションリストを送れるので、マイナーは「extranonce2」だけを更新すればよく、ブロック内のトランザクションを変更する必要がありません。`,
  list_three: `「extranonce1」は各マイナーに割り当てられるため、誰がどれだけ貢献したかをプール側で識別できます。`,
  paragraph_three: `プールに参加しているマイナーは「extranonce2」を更新しながら、ブロックヘッダー内のナンスを回していきます。もし解が見つからなければ、異なる「extranonce2」で再挑戦するのです。`,
  paragraph_four: `この方法で作業を分担して、もう一度挑戦してみましょう。`,
},

coop_three: {
  title: `協力 vs. BitRey`,
  nav_title: `チームワークでマイニング`,
  step_zero_heading: `もう一度…`,
  step_zero_paragraph_one: `ナンス空間を分割するこの新しい戦略で、今度こそBitReyに対抗できるか試してみましょう。`,
  step_two_heading: `やったぞ！`,
  step_two_paragraph_one: `あなたと仲間のマイナーたちは協力して、BitReyのネットワーク掌握を食い止めました。`,
},

split_one: {
  title: `報酬の分配`,
  nav_title: `公平な分け方`,
  heading: `よくできました！`,
  paragraph_one: `あなたはBitReyからネットワークを守っただけでなく、報酬としてビットコインも手に入れました！`,
  paragraph_two: `ブロックを1つマイニングするたびに、マイナーにはビットコインの報酬が与えられます。複数人でブロックを掘った場合は、マイニングプールという形で報酬を分け合います。`,
  paragraph_three: `この報酬は、以下の2つで構成されています：`,
  list_one: `そのブロック内のすべての取引に対する手数料`,
  list_two: `ブロック報酬（新しく発行されるビットコイン）`,
  paragraph_four: `あなたと仲間のマイナーたちは、合計7.41BTCを獲得しました。それをどう公平に分配するかを考える必要があります。作業量に応じて分けるのが筋です。`,
  paragraph_five: `マイニングプールは、各マイナーが提出した部分的な解（パーシャルソリューション）の数を記録することで、これを解決しています。プールはマイナーのハッシュパワーに応じて、それぞれに本番より低い難易度を割り当てます。マイナーは数秒ごとにその簡単な問題の解を見つけてプールに通知します。プールは提出されたすべての「シェア」を追跡し、それに応じて報酬を分配するのです。`,
  paragraph_six: `実際にどうなるか見てみましょう。`,
},

split_two: {
  title: `報酬の分配`,
  nav_title: `報酬の計算`,
  step_zero_heading: `みんなのがんばりを確認しよう`,
  step_zero_paragraph: `もう一度BitReyとの戦いを再現します。今回はプール内だけに注目し、それぞれのマイナーがどれだけ部分的な解を見つけたかを見ていきます。`,
  step_two_heading: `計算してみよう`,
  step_two_paragraph: `上の数字を見て、公平な分け方を考えてみましょう。わかりましたか？ではステップごとに確認していきましょう。`,
  step_three_heading: `ハッシュレートの割合`,
  step_three_paragraph: `これは各マイナーがどれだけ働いたかを示しますが、マイニングプール側ではこの数値を直接知ることはできません。なぜなら、マイナーは成功した結果しか送らないからです。`,
  step_four_heading: `ブロック発見の割合`,
  step_four_paragraph: `ブロックを見つける確率はとても低く、運にも大きく左右されます。強力なマイナーがいる場合、小さなマイナーは貢献していても一度もブロックを見つけられないこともあります。`,
  step_five_heading: `部分的な解の割合`,
  step_five_paragraph: `この数値こそが使える指標です。マイナーたちは簡単な問題の解を定期的にプールに報告しており、それによってどれだけ働いたかをかなり正確に測ることができます。`,
  step_six_heading: `報酬の分配`,
  step_six_paragraph: `これで、7.41BTCの報酬を、それぞれの部分的な解の割合に基づいて分配できます。おめでとう！`,
}

outro_one: {
  title: `エンディング`,
  nav_title: `チャプター完了`,
  heading: `どうだ、ヴァンダープール！`,
  paragraph_one: `よくやりました！あなたと仲間のマイナーたちは、リソースをプールしてヴァンダープールの51％攻撃を撃退することに成功しました。もう空のブロックは提出されておらず、どうやら彼は諦めたようです。`,
  paragraph_two: `さあ、報酬を受け取りましょう！次の章でビットコインを引き出してください。`,
},
resources: {
  solo: {
    hashrate_heading: `マイニングハッシュレート`,
    hashrate_paragraph: `個々のマイナーのハッシュレートとは、ビットコインネットワークのマイニングにおいて、彼らが提供する計算能力のことです。これは、新しいブロックをマイニングするために必要な数学的計算を、どれだけの速さで実行できるかを示します。個人のハッシュレートは通常「ハッシュ/秒」で測定され、大規模な場合は「テラハッシュ/秒（TH/s）」のように表されます。これはそのマイナーの規模や使用しているマイニング機器の性能によって異なります。`,
  },
  pool: {
    pool_heading: `マイニングプール`,
    pool_paragraph: `マイニングプールは、仮想通貨のマイニングにおいて重要な役割を果たします。多くの参加者が計算能力とリソースを持ち寄ることで、新しいブロックをマイニングする成功率が高まり、より安定した収益が得られるようになります。また、マイニングプールは、高性能な機器や専門サポートにアクセスする場も提供しており、参入のハードルを下げ、公平な環境をつくっています。さらに、報酬を効率的に分配する仕組みが整っており、それぞれの貢献に見合った分配がされることで、より幅広い人々が仮想通貨マイニングに取り組みやすくなっています。`,
  },
  coop: {
    distribution_heading: `作業の分担`,
    distribution_paragraph: `マイニングプールでは、同じブロックに対して複数のマイナーが同じナンスを使ってしまわないよう、注意深く管理されています。ビットコインのマイニングでは、有効なナンスを最初に見つけたマイナーが報酬を得るため、同じナンスで競ってしまうと非効率で、報酬も1人しか得られません。この問題を防ぐために、プールでは「ワークアサインメント（作業割り当て）」や「ジョブディストリビューション（仕事の分配）」という仕組みで効率的に仕事を振り分けます。新しいブロックを掘る際、プールサーバー（運営者）は、未確認トランザクションの一覧や前のブロックヘッダー、目標難易度などを含む「ジョブ」を生成してマイナーに送ります。`,
    shares_heading: `シェアの提出`,
    shares_paragraph: `マイナーは割り当てられたジョブに取り組み、正しいナンスを見つけようと計算を繰り返します。そして「これが解かもしれない」と思ったときには、「シェア」と呼ばれるものをプールサーバーに提出します。シェアは本物の解よりも簡単に見つけられるものですが、「マイニング作業をしている証拠」としての役割を果たします。`,
  },
  split: {
    payout_heading: `報酬分配方式`,
    payout_subheading: `マイニングプールは、いくつかの異なる方式で報酬を分配します。それぞれに微妙ながらも重要な違いがあります：`,
    pps_heading: `Pay-Per-Share（PPS）`,
    pps_paragraph: `PPS方式では、プールがブロックを実際に発見できたかどうかに関係なく、有効なシェアを提出するたびにマイナーに一定額の報酬が支払われます。これにより収益が安定し、定期的な収入を求めるマイナーに好まれます。変動の激しい仮想通貨マイニングにおいて、PPSは安定した収入源を提供します。ただし、プールがブロックを見つけられない場合は、運営コストやリスク補填のために手数料が差し引かれることがあります。従来のPPSでは、プールが困難な状況にあるとき、マイナーの受け取る報酬が減ることもあります。`,
    pplns_heading: `Pay-Per-Last-N-Shares（PPLNS）`,
    pplns_paragraph: `PPLNS方式では、最後の「N個」のシェアの提出に基づいてマイナーの貢献度を評価し、報酬を分配します。この方式は、一貫して活動しているマイナーを優遇するため、プールを転々とする行動（プールホッピング）を抑制する効果があります。ブロックが見つかった時点で、直近に多くのシェアを提出したマイナーに比例して報酬が与えられるため、継続的な参加を促します。`,
    pps_plus_heading: `Pay-Per-Share Plus（PPS+）`,
    pps_plus_paragraph: `PPS+方式では、シェア1つごとに固定の報酬が支払われるPPSの仕組みに加えて、プールの安定性や信頼性に貢献するマイナーへ特別ボーナスが付与されることがあります。このボーナスによって、長期的にプールに参加し続けるインセンティブが生まれます。安定した報酬に加えて、追加報酬も期待できることから、信頼性と利益の両立を重視するマイナーにとって魅力的な方式です。`,
    fpps_heading: `Full Pay-Per-Share（FPPS）`,
    fpps_paragraph: `FPPS方式では、マイナーが提出したシェア1つごとに、プールがブロックを見つけたかどうかにかかわらず報酬が支払われます。従来のPPSよりも安定性が高く、報酬の減額もありません。プールの状況にかかわらず、マイナーは自分の働きに対してフルに報酬を受け取ることができます。これは、安定した収益を重視するマイナーにとって魅力的な、シンプルで分かりやすい報酬方式です。`,
     },
   },
 },

chapter_four: {
  title: `1.61BTCを受け取ろう`,
  paragraph_one: `ふぅ、危なかった！BitReyとの戦いでまだ手が震えているけれど、勝てたことにホッとしている。`,
  paragraph_two: `デスクに腰を下ろして深呼吸し、少しうとうとしながら今日の出来事を思い返す。`,
  
  intro_one: {
    title: `イントロ`,
    nav_title: `報酬を確保せよ`,
    paragraph_one: `ホロキャット：「どちらかは寝たほうがいいニャ。キミは他のマイナーたちに連絡し始めるべきニャ。世界中よりも、彼らがもっと知りたがるはずニャ。」`,
    paragraph_two: `バットリフト・ホバーデスクに腰を下ろしながら、あなたは今日の出来事を思い返す。ヴァンダープール。BitRey。抗議のためにみんなでマイニングを止めた――そんな話が出てたけど、実は誰もそんな合意なんてしていなかった、という驚きの事実。それは本当だったのか？すべて演出だったのか？それに、いつまでこの猫の世話をしなければならないのか？（遠くで、何かが「ニャー」と鳴いた。）`,
    paragraph_three: `この先どうなるにせよ、資金は必要だ。…待てよ！BitReyとの対決で獲得したマイニング報酬をまだ受け取っていなかった！今すぐ引き出すことにする。`,
  },

public_key_one: {
  title: `公開鍵`,
  nav_title: `鍵のペア`,
  heading: `鍵ペアについて`,
  paragraph_one: `マイニングプールによれば、あなたには以前の作業で得た1.61BTCの受け取り権があるようです。`,
  list_one: `秘密鍵`,
  list_two: `公開鍵`,
  paragraph_two: `でも待って、ウォレットをまだ持っていない！どこで買えばいいんだろう？と思うかもしれません。専用のハードウェアを購入してウォレットを作ることもできますが、実はパソコンやスマホでも簡単に作れます。やってみましょう！`,
  paragraph_three: `ウォレットを作ると、「個人コード」と呼ばれる情報が生成されます。これは暗号学では「秘密鍵」と呼ばれ、通常は以下のようなペアになっています：`,
  paragraph_four: `1組の鍵ペアがあれば、ウォレットを作って資金を管理できます。ビットコインを送るときは秘密鍵を使い、受け取るときは公開鍵を使います。`,
},

public_key_two: {
  title: `公開鍵`,
  nav_title: `楕円曲線暗号`,
  paragraph_one: `秘密鍵（ゲーム内であなたが手にした「個人コード」）が手に入りました。では、そこから公開鍵をどうやって作るのでしょうか？`,
  paragraph_two: `そのためには「楕円曲線暗号」という興味深い分野を少し覗いてみる必要があります。Elliptic Curve Cryptography、略してECCと呼ばれています。`,
  paragraph_three: `ECCでは、楕円曲線上の特定の点を使って加算や乗算のような演算を行います。`,
  paragraph_four: `ビットコインでは「secp256k1」という特定の曲線を使用しています。図には視覚的にわかりやすい簡略版が表示されていますが、同じ数学的ルールに従っています。`,
  paragraph_five: `まず、この曲線上の特定の点から始めます。これは`,
  tooltip_one: {
    highlighted: `生成点（Generator Point）`,
    question: `生成点って何？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520the%2520Generator%2520point%253F`,
  },
},

public_key_three: {
  title: `公開鍵`,
  nav_title: `公開鍵の計算`,
  paragraph_one: `秘密鍵から公開鍵を導き出すには、生成点との楕円曲線演算を繰り返します。生成点はsecp256k1の標準で定められた、曲線上の特定の点で常に同じ値です。`,
  paragraph_two: `楕円曲線上での演算は加算と似ており、それを繰り返すことで乗算に相当する処理となります。アルゴリズムは次のように表されます。ここで「k」は秘密鍵、「P」は対応する公開鍵です：`,
  python: {
    paragraph_three: `関数 <span className="text-green">privatekey_to_publickey()</span> を完成させてください。この関数は、16進文字列で与えられた秘密鍵を受け取り、対応する公開鍵（GE＝グループ要素）オブジェクトを返します。`,
  },
  javascript: {
    paragraph_three: `関数 <span className="text-green">privateKeyToPublicKey()</span> を完成させてください。この関数は、16進文字列で与えられた秘密鍵を受け取り、対応する公開鍵（GE＝グループ要素）オブジェクトを返します。`,
  },
  paragraph_four: `以下に、型変換のヒントをいくつか示します：`,
  success: `よくできました！公開鍵はけっこう長いですね。次はそれを圧縮してみましょう！`,
},

public_key_four: {
  title: `公開鍵`,
  nav_title: `公開鍵の圧縮`,
  paragraph_one: `公開鍵は x 座標と y 座標から構成され、合計で64バイトになります。これを33バイトに圧縮するには、y 座標を省略して、代わりに「y が偶数か奇数か」を示す1バイトのメタデータを前に付けます。楕円曲線の方程式は変数が2つしかないため、検証者は後でこのx座標とメタデータから完全な公開鍵を復元できます：`,
  paragraph_two_javascript: `メタデータのバイトは、yが偶数なら「2」、奇数なら「3」とします。関数 <span className="text-green">compressPublicKey()</span> を完成させて、公開鍵を受け取り、33バイトの圧縮された公開鍵（16進文字列）を返してください。`,
  paragraph_two_python: `メタデータのバイトは、yが偶数なら「2」、奇数なら「3」とします。関数 <span className="text-green">compress_publickey()</span> を完成させて、公開鍵を受け取り、33バイトの圧縮された公開鍵（16進文字列）を返してください。`,
  success: `素晴らしい！これで圧縮された公開鍵ができました。次は、それをハッシュ化して、人間が読みやすい形式に変換していきましょう。`,
}

address_one: {
  title: `アドレス`,
  nav_title: `一方通行の道`,
  heading: `よくできました！`,
  paragraph_one: `これで圧縮された公開鍵が完成です！この鍵を使ってウォレット用のアドレスを生成するなど、さまざまなことができます。それについては次のチャレンジで学びましょう。`,
  paragraph_two: `ただし、公開鍵の生成は「一方通行」の操作であることを覚えておきましょう。つまり、公開鍵から秘密鍵を逆算することはできません。もしやるとすれば、悪名高い、難しい数学の問題――離散対数問題を解かない限り、公開鍵を生成するために使われた秘密鍵を特定することはできません。`,
  tooltip_one: {
    question: `離散対数問題はビットコインとどう関係しているの？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=how%2520is%2520the%2520discrete%2520log%2520problem%2520relevant%2520to%2520bitcoin%253F`,
    highlighted: `離散対数問題`,
  },
},

address_two: {
  title: `アドレス`,
  nav_title: `圧縮公開鍵のハッシュ化`,
  paragraph_one: `ハッシュのチャレンジを覚えていますか？実は、圧縮された公開鍵にハッシュをかけるだけで、最も基本的なビットコインアドレスが生成できます。ビットコインは、このためにSHA-256とRIPEMD-160という、2つの異なるハッシュアルゴリズムを使用しています。`,
  paragraph_two: `手順：`,
  paragraph_three: `<span className="indent-48">1. 圧縮公開鍵に SHA-256 をかけます。</span>`,
  paragraph_four: `<span className="indent-48">2. その出力に RIPEMD-160 をかけます。最終的な出力は、16進数で表された20バイトの文字列になります。</span>`,
  paragraph_five: `この33バイトの圧縮公開鍵（16進文字列）を受け取り、20バイトの公開鍵ハッシュ（16進文字列）を返す関数を完成させましょう。`,
  paragraph_six:
    `以下は、すでにインポート済みのハッシュライブラリのドキュメントです：\n` +
    '<Link href="https://nodejs.org/api/crypto.html#class-hash" target="_blank" className="underline">JavaScript: crypto</Link>\n' +
    '<Link href="https://docs.python.org/3/library/hashlib.html#usage" target="_blank" className="underline">Python: hashlib</Link>',
  success: `素晴らしい！あと一歩でウォレットアドレスが完成します。`,
},

address_three: {
  title: `アドレス`,
  nav_title: `P2WPKHアドレスを作ろう`,
  paragraph_one: `ビットコインにはいくつかの種類のアドレスがあります。前のステップでは、20バイトの圧縮公開鍵ハッシュを作成しました。今度はそれを、テストネット用の「Pay-to-Witness-Public-Key-Hash（P2WPKH）」アドレスに変換してみましょう。`,
  paragraph_two: `まず、ハッシュに「witness version 0」を表すバイト（'0'）を先頭に追加します。この21バイトのデータは <span className="font-bold">ウィットネスプログラム</span> と呼ばれます。`,
  paragraph_three: `次に、このウィットネスプログラムを「bech32」と呼ばれる、人間に読みやすい形式にエンコードします。bech32では、読みやすいプレフィックスとチェックサムが付加されます。`,
  paragraph_four: `プレフィックスはネットワークによって決まります：`,
  table_heading: {
    item_one: `ネットワーク`,
    item_two: `プレフィックス`,
  },
  table_rows: {
    key_one: `メインネット`,
    value_one: `bc`,
    key_two: `テストネット`,
    value_two: `tb`,
    key_three: `レグテスト`,
    value_three: `bcrt`,
  },
  paragraph_five: `今回はテストネットのアドレスを作るので、'tb' プレフィックスを使います。`,
  paragraph_six: `データがbech32形式にエンコードされれば、ビットコインアドレスの完成です！`,
  paragraph_seven: `圧縮公開鍵ハッシュから bech32 アドレスを作成する関数を完成させましょう。まずウィットネスプログラムを作成し、それを bech32 ライブラリを使ってアドレスに変換してください。`,
  paragraph_eight: `必要であれば、bech32ライブラリのコードを見て、どの関数を使えばいいか調べてみましょう：`,
  paragraph_eight_javascript: `<Link href="https://github.com/saving-satoshi/bech32js/blob/main/bech32.js" target="_blank" className="underline">JavaScript: @savingsatoshi/bech32js</Link>\n`,
  paragraph_eight_python: `<Link href="https://github.com/saving-satoshi/bech32py/blob/main/bech32py/bech32.py" target="_blank" className="underline">Python: savingsatoshi_bech32py</Link>`,
  success: `これで、マイニングで得たビットコインを受け取れるアドレスができました！`,
},

outro_one: {
  title: `アウトロ`,
  nav_title: `チャプター完了`,
  heading: `成功！`,
  paragraph_one: `あなた自身のビットコインウォレットを作成しました！`,
  paragraph_two: `マイニングプールから、今作成したウォレットにビットコインを引き出しました。これで資金は万全。ヴァンダープールとBitReyが次に何を仕掛けてこようと、準備万端です。`,
},
resources: {
  public_key_three: {
    generator_point_heading: `生成点（Generator point）`,
    generator_point_paragraph: `secp256k1曲線上の特定の点。その値はsecp256k1の標準に含まれており、常に同じです。この点は他の点と特別に異なるわけではありませんが、計算の標準的な出発点として合意されています。なぜこの点が選ばれたのか、正確な理由は今も明らかではありません。`,
    elliptic_curve_operations_heading: `楕円曲線演算`,
    elliptic_curve_operations_paragraph: `楕円曲線には独自の数学的ルールがあるため、加算や乗算のような単純な演算も異なる仕組みになります。簡潔さと分かりやすさのために、通常の乗算に似た演算には “*” のような既存の記号が使われます。`,
    discrete_log_heading: `離散対数`,
    discrete_log_paragraph: `これは、掛け算はできるけれど割り算ができないという数学的な仕組みです。簡単な例えとしては、時計を使った説明があります。たとえば、11時から3時間後は2時になります。「11＋3＝2」と言えますね。しかし「2−x＝11」を解こうとすると、xには無限の解（3、15、27、39...）が存在してしまいます。詳しくは <Link href="https://ja.wikipedia.org/wiki/離散対数問題" className="underline">Wikipedia</Link> を参照してください。`,
    tip_one: `楕円曲線上の点との「掛け算」は、通常の数値の掛け算とは異なります。では、どのように掛け算をすれば良いのでしょう？生成点 <span className="p-1 font-mono bg-[#0000004D] m-1">G</span> は <span className="p-1 font-mono bg-[#0000004D] m-1">secp256k1.GE</span> 型のオブジェクトです。このクラスを調べて、どんなメソッドが使えるか確認してみましょう。`,
    tip_two: `秘密鍵は16進形式で渡されますが、生成点との掛け算を行う前に数値（JavaScriptなら BigInt）に変換する必要があります。`,
  },
  public_key_four: {
    y_coordinate_compression_heading: `公開鍵の圧縮`,
    y_coordinate_compression_paragraph: `楕円曲線上で点の加算を計算する際には、2つの点の座標を使って、曲線上の第3の点の座標を導き出します。しかし、あるx座標に対しては、通常2つの異なるy座標が存在します（いくつかの特例を除く）。公開鍵を圧縮する際には、どちらかのy座標を選び、x座標だけと、それが偶数か奇数かを示すメタデータだけを含めます。このメタデータによって、後で正しいy座標を判別できます。`,
    tip: `今回のチャレンジは実はとてもシンプルです。y座標が偶数か奇数かを判定し、その情報をメタデータとして公開鍵の先頭に付け加えるだけなのです。`,
  },  
      address_two: {
        hash_algo_heading: `SHA-256、RIPEMD-160`,
        hash_algo_paragraph: `ハッシュ関数は、あらゆる種類・量のデータを入力として受け取り、常に同じサイズの結果を返します。SHA-256 では 32 バイト、RIPEMD-160 では 20 バイトです。出力は決定論的（同じ入力には必ず同じ出力）ですが、それ以外はランダムと区別できません。ハッシュ関数はデータを小さく一貫したフィンガープリント（指紋）へ要約します。`,
        tip_one: `SHA-256 ハッシュを計算する際は、圧縮公開鍵を 16 進文字列ではなくバイト列としてハッシュしてください。JavaScript を使う場合は、16 進文字列をバッファに変換する必要があります。`,
        tip_two: `ハッシュアルゴリズムを正しい順序で実行しているか必ず確認しましょう！`,
      },
      address_three: {
        wpkh_heading: `Witness Public Key Hash（wpkh／ウィットネス公開鍵ハッシュ）アドレス`,
        wpkh_paragraph: `ビットコインアドレスは、ユーザーが扱いやすいように設計された文字列です。短く、コピー＆ペーストしやすく、正確にコピーされたことを確認するためのチェックサムも備えています。アドレスは、受取人が後で使用できるビットコイン出力スクリプトを安全にエンコードしたものです。出力スクリプトには複数の種類があり、エンコード方式もいくつか存在します。このチャレンジでは、圧縮公開鍵を bech32 でエンコードし、Witness Public Key Hashアドレスを作成します。`,
        network_heading: `メインネット、テストネット、サイネット、レグテスト`,
        network_paragraph: `ビットコインソフトウェアを開発する際は、実際のお金を扱う前にコードをテストすることが重要です。最も簡単な方法の一つは、新しいジェネシスブロックを持ち、コインに価値がなく、マイニングが無料で簡単、しかもいつでもリセットできる別ブロックチェーンを使うことです。これらのチェーンは、メインネットの実際のコインやノードに干渉しない独立したノードネットワークによって支えられています。Testnet と Signet は、世界規模でメインネットと並行して維持されている代表的な代替ビットコインブロックチェーンです。Regtest は完全にローカルで動作し、ネットワーク接続を必要としない開発者向けモードです。`,
        tip: `bech32 ライブラリをよく確認し、利用できる正確なメソッドを探してください。`,
      },
    },
  },

  chapter_five: {
    title: `本物のサトシ、立ち上がってください`,
    paragraph_one: `夜も更け、あなたは疲れている…。しかし目を閉じたその瞬間、二重の悪いニュースが飛び込んでくる。`,
    paragraph_two: `1）ヴァンダープールがテレビに戻ってきた。`,
    paragraph_three: `2）彼は自分がサトシ・ナカモトのひ孫だと主張している。`,
    paragraph_four: `彼は寝不足のように見える。`,
    intro_one: {
      title: `イントロ`,
      nav_title: `信じるな、検証せよ`,
      paragraph_one: `—デボラ・チャンク：「ヴァンダープールさん。あなたは“反ソーシャルメディア”とでも呼ぶべきSNS上で、自分がサトシ・ナカモトのひ孫であると衝撃的な主張をしましたが、それは本当ですか？」`,
      paragraph_two: `—ヴァンダープール：「その通りです、デボラ。この秘密はずっと長い間、私の胸に秘めていました。というのも、我が家では、一見なんの変哲もないCD-ROMが代々受け継がれてきたんです。秘密を守るために、ラベルには<span className="italic">Creed – My Own Prison</span>と書いておきました。その中には、私の曽祖父サトシ・ナカモトの莫大なビットコインの秘密鍵が入っています。ですから、私がマイナーを代表して発言する時は、サトシ・ナカモトの代理としても発言しているのです。」`,
      paragraph_three: `—デボラ・チャンク：「あなたが実際にその秘密鍵を持っていると検証する方法はありますか？」`,
      paragraph_four: `—ヴァンダープール：「もちろんありますよ。公開鍵暗号のシンプルな仕組みを使えばいいだけです。」`,
      paragraph_five: `—デボラ・チャンク：「でも、なぜ今までこの衝撃的な事実を公表しなかったのですか？」`,
    },
    intro_two: {
      nav_title: `ヴァンダープールの大胆な主張`,
      paragraph_one: `—ヴァンダープール：「勇気がなかったんです。私の家系についての噂はずっとありましたし、それを簡単に裏付けることもできました。でも注目される覚悟がなかったんです。何しろ私は、私有の島の中でも一番お気に入りの島にある14世紀の城で隠遁生活をしていましてね。毎週このようなインタビューを5〜6件、庭のジャグジーからこなす程度の暮らしをしています。」`,
      paragraph_two: `—ヴァンダープール：「でも今、ビットコインの未来がかかっているからこそ、現実と向き合う時だと悟ったんです。特に、Creedのデビューアルバム『My Own Prison』の音楽とともに。」＊ヴァンダープールは20世紀のアルバムタイトル曲のメロディを口ずさむ＊`,
      paragraph_three: `—ヴァンダープール：「もっと早く名乗り出なかったことを申し訳なく思っています。なぜなら、そのCD-ROMにはサトシ・ナカモトによるビットコインの改訂プランも入っていたんです。曽祖父はビットコインの供給量を2,100万枚に制限したことをずっと後悔していたんですよ。だから私は、曽祖父の夢を叶えて、ビットコインをハードフォークして永続的に発行可能な形にしようと思っています。」`,
    },
    intro_three: {
      nav_title: `サトシからのメッセージ`,
      paragraph_one: `あなたの TXM4H-A ホバースクリーンがピコンと鳴る。新しいメッセージが届いている。`,
      paragraph_two: `—ホロキャット：私の鼻、忘れずにポチッとしてね。`,
      paragraph_three: `あなたは彼女の鼻をポチッと押す`,
      paragraph_four: `—サトシ・ナカモト：「ヴァンダープールは、彼が主張するような人物ではない。キミなら彼の嘘を暴くことができる。彼に、ウォレットの秘密鍵を使ってメッセージに署名することで、サトシのビットコインの所有を証明するよう要求するんだ。」`,
    },
    derive_message_one: {
      title: `メッセージを導き出す`,
      nav_title: `問題のメッセージ`,
      heading: `ヴァンダープールはこう主張しています：「サトシの鍵でメッセージに署名した」`,
      code_one: `-----BEGIN BITCOIN SIGNED MESSAGE----- \n \n 私はヴァンダープールであり、サトシがブロック #170 で初めて確認されたビットコイン取引に署名するために使用した秘密鍵を保持しています。このメッセージはその秘密鍵で署名されています。 \n \n -----BEGIN BITCOIN SIGNATURE----- \n \n`,
      code_two: `<span className="break-all"> H4vQbVD0pLK7pkzPto8BHourzsBrHMB3Qf5oYVmr741pPwdU2m6FaZZmxh4ScHxFoDelFC9qG0PnAUl5qMFth8k= </span>`,
      code_three: `\n \n-----END BITCOIN SIGNATURE-----`,
      paragraph_two: `これって一体どういう意味？`,
    },
    derive_message_two: {
      nav_title: `公開鍵を探す`,
      paragraph_one: `第4章で学んだ通り、秘密鍵とは非常に大きなランダムな数字で、それを生成した本人だけが秘密に保持しています。楕円曲線暗号の計算を使えば、その秘密鍵から対応する公開鍵を導き出すことができます。`,
      paragraph_two: `公開鍵は識別子として共有でき、秘密鍵はその識別子を自分が制御していることを証明するために使われます。その証明が「署名（SIGNATURE）」です。署名を作成するには、メッセージと秘密鍵が必要です。そしてその署名は、メッセージと対応する公開鍵があれば誰でも検証できます。`,
      paragraph_three: `ヴァンダープールは署名とメッセージを提示しました。では公開鍵はどこ？`,
    },
    derive_message_three: {
      nav_title: `サトシの署名を探す`,
      heading: `まずはサトシの署名を見つけよう`,
      paragraph_one: `ブロック #170 には、サトシからハル・フィニーへの<link href="https://bitcointalk.org/index.php?topic=155054.0" target="_blank" className="underline">最初のビットコイン取引</link>が含まれています。この取引には<Link href="https://blockstream.info/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16?expand" target="_blank" className="underline">1つのインプット</Link>しかありません。そのインプットにある scriptSig を取得しましょう。そこにサトシの署名が含まれています！`,
      placeholder: `ここにデータを貼り付けてください`,
      success: `よくできました！これは実際にサトシの署名であり、彼のビットコインをハル・フィニーに送金することを承認したものです。`,
    },
    derive_message_four: {
      nav_title: `サトシの公開鍵を探す`,
      heading: `では公開鍵はどこに？`,
      paragraph_one: `実はそれは、サトシがブロック #9 をマイニングした際に生成したビットコインと一緒に記録されています。`,
      paragraph_two: `<Link href="https://blockstream.info/tx/0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9?output:0&expand" target="_blank" className="underline">こちらのリンク</Link>をたどって、インプット #0 の上部にあるソーストランザクションを確認してください。これはサトシがブロック #9 をマイニングして作成したトランザクションです。この取引では50 BTCが生成され、それが…公開鍵を使ったスクリプトによってロックされています！scriptPubKey 内で「0411...」から始まるデータを見つけましょう。`,
      paragraph_three: `その公開鍵は、スクリプト命令 OP_PUSHBYTES と OP_CHECKSIG の間にあります。以下に貼り付けてください：`,
      placeholder: `ここにデータを貼り付けてください`,
      success: `それです！`,
    },
    derive_message_five: {
      nav_title: `次は署名の検証`,
      paragraph_one: `前の演習では、サトシがブロック #9 をマイニングして 50 BTC を得たことを確認しました。そのコインは、ハル・フィニーへの取引（ブロック #170 内）でインプットとして使用されました。彼は10 BTCをハル・フィニーの公開鍵に送り、おつりとして 40 BTC を自分に戻しています。サトシの秘密鍵は、その送金を承認するための署名を作るのに使われました。`,
      paragraph_two: `次はその署名をどう検証するかを学びましょう。でも、まだ何かが足りません…ハルへの送金を承認するためにサトシが署名した「メッセージ」とは一体何でしょう？`,
    },
    derive_message_six: {
      nav_title: `メッセージを導き出す`,
      heading: `トランザクションからメッセージを導く`,
      paragraph_one: `ブロックエクスプローラーのページを見るだけでも、ビットコインのトランザクションが複数の部分から成り立っていることが分かります。小さな数値だけの部分もあれば、大きなデータのかたまりもあります。ビットコインのプロトコルには、トランザクションから署名用メッセージを生成するための非常に厳密なアルゴリズムが定められています。`,
      paragraph_two: `その手順は<Link href="https://en.bitcoin.it/wiki/OP_CHECKSIG" target="_blank" className="underline">こちら</Link>にまとめられています。便利なことに、<Link href="https://en.bitcoin.it/wiki/OP_CHECKSIG#Code_samples_and_raw_dumps" target="_blank" className="underline">ブロック #170 に含まれるこの正確なトランザクション</Link>を例として使用しています。`,
      paragraph_three: `まずは、トランザクション全体を構成する、未加工のトランザクションデータが必要です。<Link href="https://blockstream.info/api/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16/hex" target="_blank" className="underline">このブロックエクスプローラー</Link>の "hex" API エンドポイントを使えば取得できます。データ全体（blob）をコピーして貼り付けてください。`,
      input_challenge_label: `トランザクションのデータを貼り付けてください`,
      success_message_line_one: `これは未加工のトランザクションで、各構成要素がラベル付けされています：`,
      success_message_line_two: `バージョン：`,
      success_message_line_three: `インプット数：`,
      success_message_line_four: `インプット #0 の元となったトランザクションのハッシュ：`,
      success_message_line_five: `資金提供元トランザクションにおけるインプット #0 のインデックス：`,
      success_message_line_six: `インプット #0 を使うための scriptSig：`,
      success_message_line_seven: `インプット #0 のシーケンス：`,
      success_message_line_eight: `アウトプット数：`,
      success_message_line_nine: `アウトプット #0 の金額（10 BTC または 1,000,000,000 satoshi）：`,
      success_message_line_ten: `アウトプット #0 の scriptPubKey（ハル・フィニーの公開鍵＋OP_CHECKSIG）：`,
      success_message_line_eleven: `アウトプット #1 の金額（40 BTC または 4,000,000,000 satoshi）：`,
      success_message_line_twelve: `アウトプット #1 の scriptPubKey（おつりとしてのサトシの公開鍵）：`,
      success_message_line_thirteen: `ロックタイム：`,
    },
    derive_message_seven: {
      nav_title: `署名用メッセージの構築`,
      paragraph_one: `署名の中に自分自身の署名を含めることはできないため、scriptSig は除去する必要があります。ビットコインのプロトコルでは、実際には scriptSig を、使用するアウトプットの scriptPubKey に置き換えます。`,
      paragraph_two: `前のステップで scriptPubKey はすでに見つけたので、それを最初の空欄に貼り付けてください。`,
      paragraph_three: {
        a: `トランザクションメッセージを完成させるために最後に必要なのは`,
        b: `です。これは次の章で詳しく説明しますが、今回はとりあえずメッセージの末尾に <span className="font-bold">01000000</span> を追加しましょう。`,
      },
  tooltip_one: {
    question: `sighash フラグとは？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520sighash%2520flags%253F`,
    highlighted: `sighash タイプフラグ`,
  },
  success: `いいですね！署名用のメッセージを構築できました。`,
 },
  verify_signature_one: {
    title: `署名を検証する`,
    nav_title: `署名の検証`,
    heading: `ついにメッセージが揃った！`,
    paragraph_one: `私たちは今、サトシが自分の秘密鍵で作成した署名を持っています。そして彼の公開鍵もあります。では、署名をどう検証するかを学びましょう。その後、ヴァンダープールの署名も検証してみましょう。`,
  },
  verify_signature_two: {
    title: `署名を検証する`,
    nav_title: `メッセージをハッシュする`,
    heading: `トランザクションダイジェストをハッシュ化`,
    paragraph_one: `前のステップで作成したシリアライズされたトランザクションデータは、実は長すぎて ECDSA ではそのまま署名や検証ができません。`,
    paragraph_two: `大きなデータをもっと扱いやすい形に圧縮する方法を、私たちはすでに知っていますよね？そう、「ハッシュ」です。`,
    paragraph_three: {
      a: `ビットコインのプロトコルでは、署名可能なメッセージに圧縮するために`,
      b: `を使用します。`,
    },
    paragraph_four: `32バイトのハッシュを得たら、そのデータは整数として再解釈されます。そう、32バイトの整数です（とてつもなく大きな数ですね！）`,
    tooltip_one: {
      question: `なぜビットコインではすべてでダブルハッシュ（HASH256）が使われているの？`,
      link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=Why%2520does%2520everything%2520in%2520bitcoin%2520use%2520double%2520hash%2520%28HASH256%29%253F`,
      highlighted: `ダブルSHA256ダイジェスト`,
    },
    success: `よくできました！`,
  },
  verify_signature_three: {
    nav_title: `署名をデコードする`,
    heading: `署名をデコードしよう`,
    label_one: `R値を貼り付けてください`,
    label_two: `S値を貼り付けてください`,
    paragraph_one: `サトシの署名は、ASN.1のサブセットであるDERという形式でエンコードされています。`,
    paragraph_two: `ここから取り出すべき32バイトの数値が2つあります。それぞれR値とS値と呼ばれ、DERシーケンス内ではそれぞれバイト列「0220」で始まります。DERの全体を完全にデコードする代わりに、このプレフィックスを目印にR値とS値を探し、貼り付けてください。`,
    paragraph_three: `# サトシの署名（ハル・フィニーへの取引のscriptSigに含まれるもの、ブロック170）`,
  },
    verify_signature_four: {
      nav_title: `公開鍵をデコードする`,
      heading: `公開鍵をデコードしよう`,
      label_one: `x 座標を貼り付けてください`,
      label_two: `y 座標を貼り付けてください`,
      paragraph_one: `第4章で学んだように、公開鍵とは実は ECDSA 曲線上の点であり、x と y の値を持っています。先頭のバイト「04」は「非圧縮形式」を意味します（第4章で学んだ 02 や 03 は圧縮形式）。この最初の1バイトを取り除くと、残りのデータが 32バイトずつの x 座標と y 座標になります。コピーして貼り付けてください。`,
      paragraph_two: `# サトシの公開鍵（ブロック9のコインベーストランザクションの scriptPubKey より）`,
    },
    verify_signature_five: {
      title: `署名を検証する`,
      nav_title: `署名をテストする`,
      heading: `署名を検証しよう！`,
      success: `やりました！サトシの署名を検証できました！`,
      paragraph_one: `ここまでで、ECDSA の計算に必要なものはすべて揃いました。`,
      paragraph_two: `ECDSA署名の検証アルゴリズムの説明は、<Link className="underline" href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm#Signature_verification_algorithm" target="_blank">こちら</Link>や、<Link className="underline" href="https://www.secg.org/sec1-v2.pdf#page=52" target="_blank">こちら</Link>にあります。`,
      paragraph_three: `私たちは公開鍵の X 座標と Y 座標から、Group Element オブジェクトを作成しておきました。あとはあなたが ECDSA の署名検証関数 <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">verify()</span> を完成させましょう。有効な場合のみ True を返すようにしてください！`,
      paragraph_four: `サトシの署名が有効であることは確かです。2010年以来、すべてのビットコイン・フルノードが検証してきたからです。もしプログラムが True を返さない場合は、何かがおかしいということです。`,
      python: {
        paragraph_five_part_one: `ヒント：<span className="text-green">pow()</span>`,
        paragraph_five_part_two: `関数は、負の指数や法（modulus）を引数に取ることができます。詳しくは<Link className="underline" href="https://docs.python.org/3/library/functions.html#pow" target="_blank">こちらのドキュメント</Link>をご覧ください。`,
      },
      javascript: {
        paragraph_five_part_one: `補助関数 <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">invert()</span> を用意しています。`,
        paragraph_five_part_two: `JavaScriptには標準で法付きの指数関数がないため、この関数を使ってください。`,
      },
    },
    validate_signature_one: {
      title: `署名を検証する`,
      nav_title: `メッセージを準備する`,
      heading: `ヴァンダープールのメッセージを検証用に整える`,
      paragraph_one: `ヴァンダープールは、<Link href="https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki" target="_blank" className="underline">ビットコインのメッセージ署名プロトコル</Link>を使ってこのパフォーマンスを行いました。計算にはこれまでと同じアルゴリズムを使いますが、データの準備方法が少し異なります。`,
      paragraph_two: `まず、彼のメッセージを以下のテンプレートに従って、バイト列の配列にエンコードする必要があります。`,
      paragraph_three: {
        pre_link: `その後、このデータを`,
        highlighted: `ダブルSHA-256ハッシュ`,
        question: `なぜビットコインではダブルハッシュを使うの？`,
        post_link: `して、そのハッシュを整数に変換します。<span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">encode_message()</span> 関数を完成させてください。返すべき値は32バイトの16進数（hex）です。`,
      },
      success: `よくできました！`,
    },
    validate_signature_two: {
      nav_title: `署名を準備する`,
      heading: `ヴァンダープールの署名を検証用に整える`,
      paragraph_one: `ヴァンダープールが使ったビットコインメッセージ署名プロトコルでは、署名は base64 で表されます。この base64 文字列を 65 バイトのシーケンスにデコードする必要があります。今のところ、先頭のメタデータ1バイトは無視してかまいません。残りのデータが、ステップ6で学んだ32バイトの r 値と s 値です。`,
      javascript: {
        paragraph_two: {
          post_link: `<span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">decode_sig()</span> 関数を完成させてください。`,
          return: `この関数は、[r, s] の値を BigInt 型の配列として返すべきです。`,
        },
      },
      python: {
        paragraph_two: {
          post_link: `<span className=" text-green">decode_sig()</span> 関数を完成させてください。`,
          return: `この関数は (r, s) の値をタプルとして返す必要があります。`,
        },
      },
      success: `よくできました！`,
    },
    validate_signature_three: {
      title: `署名を検証する`,
      nav_title: `ヴァンダープールは嘘をついたのか？`,
      heading: `で、ヴァンダープールは嘘つきなのか？！`,
      paragraph_one: `プログラムに必要なすべての要素を揃えて、ヴァンダープールの署名が本当にサトシの公開鍵に対応する秘密鍵から作られたものかを検証してみましょう。用意されたコードを使って、<span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">verify()</span> 関数を実行するために必要な引数をすべて入力してください。`,
      paragraph_two: `その後、プログラムを実行してヴァンダープールが嘘をついていたのか確認しましょう。ドラムロールをお願いします…`,
      success: `このメッセージは、検証に失敗したため、署名がサトシの公開鍵から作られたものではないことを示しています。`,
    },
    validate_signature_four: {
      title: `署名を検証する`,
      nav_title: `正しい鍵を探す`,
      heading: `ヴァンダープールはどうやって署名を作ったのか？`,
      paragraph_one: `ホロキャットが口をはさみ、BitReyの内通者からヴァンダープールがよく使っている公開鍵のリストを受け取ったと言います。彼はそのうちのどれかの鍵でメッセージに署名したのかもしれません。`,
      paragraph_two: `署名の検証に成功し、このメッセージに署名したヴァンダープールの公開鍵を特定できる鍵を入力してください。`,
      paragraph_three: `この中のどれかの鍵で、ヴァンダープールのメッセージと署名を検証できるでしょうか？`,
      success: `この公開鍵では署名の検証に成功しました。つまりこれはサトシではなく、ヴァンダープールの鍵によるものでした！`,
    },
  outro_one: {
    title: `アウトロ`,
    nav_title: `チャプター完了`,
    heading: `ヴァンダープールは嘘をついていた！`,
    paragraph_one: `あなたはビットコインで最も重要な教訓のひとつを学びました。「信じるな、検証せよ」。<br><br>そうすることで、ヴァンダープールがサトシの鍵を使ってメッセージに署名していなかったことを発見し、彼の家系の物語、信用、そして BitRey の信頼性にも大きな疑いの目が向けられることになりました。<br><br>あとはあの曲さえ頭から離れてくれれば完璧なんですがね。`,
  },
  resources: {
    derive_message_three: {
      op_pushdata_heading: `OP_PUSHDATA`,
      op_pushdata_paragraph_one: `ビットコインスクリプトにおける OP_PUSHDATA は、任意のデータをブロックチェーンに挿入するための重要な役割を担っています。実際には、さまざまなサイズのデータ要素をスタックにプッシュできる一連のオペコードのカテゴリであり、ビットコインのスクリプト言語をより柔軟にしています。このオペコードは、スマートコントラクト機能やカスタムトランザクションタイプの実装を可能にするうえで特に重要です。<br><br>今回の例では、71バイトのデータをスタックにプッシュすることになっていると分かっているので、このオペコードが hex（16進数）でどのように表現されるか考えてみてください。いくつかの OP_CODE についての詳細は <Link href="https://en.bitcoin.it/wiki/Script#Constants" target="_blank" className="underline">こちら</Link> にあります。`,
    },
derive_message_four: {
  op_checksig_heading: `OP_CHECKSIG`,
  op_checksig_paragraph_one: `ビットコインスクリプトにおける OP_CHECKSIG は、正しい秘密鍵だけが特定のトランザクションを使用できるようにするための、極めて重要な命令です。ほぼすべてのビットコインスクリプトには OP_CHECKSIG が含まれており、それによってビットコインを使おうとする人が、指定された鍵で正しく署名できることを検証します。こうした OP_CODE の詳細については、<Link href="https://en.bitcoin.it/wiki/Script#Constants" target="_blank" className="underline">こちら</Link>をご覧ください。`,
},
derive_message_six: {
  transaction_parts_heading: `トランザクションの構成要素`,
  transaction_parts_one: `バージョン：この値はトランザクションの構造を定義するバージョン番号です。`,
  transaction_parts_two: `インプット数：このトランザクションに含まれるインプットの数です。`,
  transaction_parts_three: `インプット #0 の TXID：インプット #0 が使用する元のトランザクションのハッシュ値です。`,
  transaction_parts_four: `インプット #0 のインデックス：上記の TXID に対応するトランザクション内で、使用されるアウトプットのインデックス番号です。`,
  transaction_parts_five: `scriptSig：指定されたアウトプットを使うことを承認するためのデータです。通常は署名で構成されます。`,
  transaction_parts_six: `インプット #0 のシーケンス：このインプットのシーケンス番号です。`,
  transaction_parts_seven: `アウトプット数：このトランザクションが持つアウトプットの数です。`,
  transaction_parts_eight: `アウトプット #0 の金額：最初のアウトプットで送金される金額です。リトルエンディアン整数で表されます。`,
  transaction_parts_nine: `アウトプット #0 の scriptPubKey：このスクリプトは資金を使うために何が必要かを定義します。通常は公開鍵やチャレンジ形式のオペコードを含みます。`,
  transaction_parts_ten: `アウトプット #1 の金額：2つ目のアウトプットで送金される金額です。リトルエンディアン整数で表されます。`,
  transaction_parts_eleven: `アウトプット #1 の scriptPubKey：このスクリプトは資金を使うために何が必要かを定義します。通常は公開鍵やチャレンジ形式のオペコードを含みます。`,
  transaction_parts_twelve: `ロックタイム：このトランザクションが有効になるまでのブロック高（または時間）を指定します。`,
},
derive_message_seven: {
  sighash_type_flag_heading: `SigHash タイプフラグ`,
  sighash_type_flag_paragraph_one: `SigHash フラグは、どの部分のトランザクションデータが秘密鍵によって署名されるかを定義するビットコインの仕組みです。簡単に言えば、署名者がどのデータに対してコミットするのか、その範囲を決めるものです。SigHash フラグは各署名に1バイト付加され、同じトランザクション内のインプットごとに異なる場合もあります。いくつかの種類の SigHash フラグについては <Link href="https://river.com/learn/terms/s/sighash-flag" target="_blank" className="underline">こちら</Link>をご覧ください。`,
},
verify_signature_two: {
  tip_one: `JavaScript のヒント：16進文字列をバイト配列に変換するには <span className="p-1 font-mono bg-[#0000004D] m-1">Buffer.from(someString, 'hex');</span> を使います。`,
  signature_verification_heading: `署名検証`,
  signature_verification_paragraph_one: `署名検証とは、ある当事者が秘密の数値（秘密鍵）を知っている場合にのみ生成できるデータ（署名）を提供する、数学的アルゴリズムです。検証では、署名・公開鍵・メッセージを照合し、アルゴリズムの結果が TRUE になれば署名は本物と判断されます。`,
},
verify_signature_three: {
  signature_encoding_heading: `署名のエンコーディング`,
  signature_encoding_paragraph_one: `DER（Distinguished Encoding Rules）署名は、ビットコインで ECDSA 署名をエンコードするためのフォーマットです。ECDSA 署名は秘密鍵と署名対象メッセージのハッシュから生成され、32 バイトずつの 2 つの数値（r, s）で構成されます。詳細は <Link href="https://technicaldifficulties.io/2020/07/22/bip-66-unpacking-der-signatures/" target="_blank" className="underline">こちら</Link> を参照してください。`,
},
verify_signature_four: {
  eliptic_curve_heading: `楕円曲線電子署名アルゴリズム（ECDSA）`,
  eliptic_curve_paragraph_one: `ECDSA は、資金が正当な所有者によってのみ使用されることを保証するためにビットコインで採用されている暗号アルゴリズムです。公開鍵は秘密鍵に楕円曲線乗算を施して導出できますが、逆に公開鍵から秘密鍵を導くのは計算的に不可能です。この一方向性がビットコインのセキュリティの要となっています。`,
  public_private_key_heading: `公開鍵と秘密鍵`,
  public_private_key_paragraph_one: `ビットコインでは鍵ペアを用いて取引の安全性を確保します。秘密鍵は秘匿され、トランザクションの署名やアドレスの所有証明に使われます。秘密鍵から派生する公開鍵は共有可能で、秘密鍵を明かすことなく、署名が秘密鍵の所有者によって行われたことを検証するために使用されます。`,
},
verify_signature_five: {
  finite_field_arithmetic_heading: `有限体演算`,
  finite_field_arithmetic_paragraph_one: `ECDSA で用いられる演算は、一定範囲内（有限体）の数を対象に行います。加算・減算・乗算・モジュラ逆数の計算などを、体のサイズを法として実行することが、ビットコインの楕円曲線計算に不可欠です。`,
  ge_and_fe_heading: `群要素（GE）と体要素（FE）`,
  ge_and_fe_paragraph_one: `楕円曲線暗号では、群要素（GE）は通常曲線上の点を指します。このチャレンジでは GE は特定の x, y 座標を持つ点を意味します。体要素（FE）は有限体の中で使用される数で、体の制約下での演算に用いられます。`,
  modular_inverse_heading: `モジュラ逆数`,
  modular_inverse_paragraph_one: `数 a の法 m におけるモジュラ逆数 b とは、(a * b) % m = 1 を満たす数です。モジュラ逆数の計算は ECDSA 署名検証の重要ステップであり、検証過程における u1 と u2 の計算に使われます。`,
},
validate_signature_one: {
  message_verification_heading: `メッセージ検証の重要性`,
  message_verification_paragraph_one: `メッセージ検証は、ビットコインエコシステム内の通信のセキュリティを高めます。これにより、メッセージの真正性と完全性を検証できるため、ピアツーピア取引やスマートコントラクトにおける当事者間の通信など、信頼と検証が不可欠な場面で役立ちます。さらに、メッセージ検証は、身元確認や特定のビットコインアドレスの所有証明といった様々な応用の基礎となります。暗号学的な保証を追加することで、ビットコインネットワークのトラストレスかつ分散型の性質を強化します。`,
},
validate_signature_two: {
  base64_encoding_heading: `Base64 エンコーディング`,
  base64_encoding_paragraph_one: `Base64 は基本的なバイト → テキストのエンコーディング方式で、バイト列への変換やバイト列からテキストへの変換を行う際に、URL パスやクエリパラメータとの衝突を避けることができます。Base58 と異なり、Base64 ではユーザーがコピーしたり読み上げたりする際に混同しやすい文字（ゼロ、大文字の O、大文字の I、小文字の l）が含まれているため注意が必要です。`,
},
validate_signature_three: {
  signing_and_ownership_heading: `メッセージ署名と所有権`,
  signing_and_ownership_paragraph_one: `ビットコインの擬似的な匿名性により、私たちが証明できる範囲には限りがあります。なぜなら鍵の所有者が署名を拒否したり、意図的に誤った鍵で署名したりすることが可能だからです。したがって、私たちが唯一証明できるのは、無効な署名を生成した鍵は、そのメッセージに正しく署名できる鍵とは一致しないということだけです。`,
},
validate_signature_four: {
  one_for_one_heading: `一対一の関係`,
  one_for_one_paragraph_one: `ECDSA の信頼性とセキュリティを確保するためには、秘密鍵で作成された署名は、対応する公開鍵でのみ検証可能である必要があります。異なる秘密鍵が同じ公開鍵や署名を生成できるようであれば、ECDSA のセキュリティと信頼性は損なわれてしまいます。したがって、メッセージに署名できた公開鍵こそが、そのビットコインを所有していると判断できます。`,
      },
    },
  },

chapter_six: {
  title: `鍵の保有者`,
  paragraph_one: `ああっ！ヴァンダープールは、自分の詐欺的な主張を暴露したあなたを捕らえようとしています。ホロキャットが袋から飛び出したにもかかわらず、多くの怯えた人々は、ヴァンダープールが自分自身や家族、その先祖にまつわって作り上げた神話にすがり続けています。時代は不安定で、人々はヒーローを必要としているのです。残念ながら、多くの人にとって彼が唯一の希望なのです。`,
  intro_one: {
    title: `イントロ`,
    nav_title: `それって本当にサトシ？`,
    paragraph_one: `—サトシ・ナカモト：「よくやった。これで世界は、ヴァンダープールが詐欺師だと自分の目で確かめられる。まだ信じていない人も、我々の任務が終わる頃には信じるだろう。」`,
    paragraph_two: `あなたはふと立ち止まり、これまでのすべてのメッセージが「サトシ・ナカモト」の署名で送られていたことに気づきます。ビットコインの理念に共感する誰かが使っている偽名だろうと、あなたは当然のように思っていました。本物のサトシ・ナカモトなわけがない。でも……ついに、あなたは聞いてみる決心をします。`,
    paragraph_three: `—「こんなこと聞いたらバカにされるかもしれないけど……あなたって、本物のサトシなの？」`,
  },
  intro_two: {
    title: `イントロ`,
    nav_title: `ミカ3000への支払い`,
    paragraph_one: `—ホロキャット：「それが唯一のおバカ発言だと思ってるなら、まだまだ見込みがあるニャン♪」`,
    paragraph_two: `—サトシ・ナカモト：「ビットコインは何年も前に、その創造者の手を離れている。たとえヴァンダープールでも私でも、あるいはその子孫だったとしても、それは重要ではない。ビットコインはコミュニティによって定義され、サトシを含む個人や組織に乗っ取られることはできない。これを証明することこそが、本当の戦いなんだ。勝手に頼んでしまったけど、君の友達、変わり者のフリーライターに連絡しておいたよ。」`,
    paragraph_three: `—えっ、何をしたって？`,
    paragraph_four: `—ピコッ。`,
    paragraph_five: `—ホロキャット：「私の鼻をポチッとするの、忘れニャいでね〜」`,
    paragraph_six: `—ミカ3000：「度胸はあるようですが、それだけでは足りませんよ！あなたが発見したのは物語の序章にすぎません。この先を知るには、ヴァンダープールの私有島に行かなくちゃいけませんし、資金もそれなりに必要です。以前、一緒にセットアップしたマルチシグウォレット、覚えてますか？あなたは、まだ私の鍵の1つを持っていますよね。──資金を引き出すのを手伝ってほしいんです、協力してくれますね？」`,
  },
in_out_one: {
  title: `入出力の基本`,
  nav_title: `未使用のUTXO`,
  paragraph_one: `ミカ3000はヴァンダープールの私有島に行くための機材を買うのに、1 BTC を必要としています。あなたはチャプター3で得たマイニング報酬から1 BTCを送ることに決めました。その報酬は、チャプター4で作成したアドレスにマイニングプールから送られています。`,
  paragraph_two: `あなたはビットコインのフルノードを開き、ブロックチェーン上の自分の資金の所在を確認するためにコマンドを実行します。`,
  paragraph_three: `これが「未使用トランザクション出力（UTXO）」です。チャプター4で見覚えのある圧縮公開鍵ハッシュやアドレスが確認できるかもしれません。金額も正しそうです：1.61 BTC。`,
},
in_out_two: {
  title: `入出力の基本`,
  nav_title: `送金先アドレス`,
  paragraph_one: `ミカ3000は、あなたの1 BTCの協力金を受け取るためのアドレスを教えてくれます：`,
  paragraph_two: `あれ？このアドレスは自分のものよりずいぶん長いぞ。なぜだろう…`,
  paragraph_three: `あなたの1.61 BTCのうち1 BTCをこのアドレスに送るトランザクションを作成・署名する必要があります。チャプター5ではサトシのトランザクション構造を見ましたが、今回は少し違います。現在ではより新しいトランザクション形式が存在し、Segregated Witness（SegWit／セグウィット）というプロトコルを使ってトランザクションバージョンを2に設定します。`,
},
in_out_three: {
  title: `入出力の基本`,
  nav_title: `トランザクションのステップ`,
  paragraph_one: `SegWit トランザクションは、従来のトランザクションとほぼ同じしくみで動作します。バージョンやロックタイムといったグローバルな値があり、使用したいUTXO（入力）の配列と、新しく作成するUTXO（出力）の配列があります。そして入力ごとに1つずつ、署名やスクリプトを含む「witness（証拠情報）」の配列もあります。これは scriptSig の代わりに使われます。`,
  paragraph_two: `これらのすべての要素におけるメッセージシリアライズの仕様は、<Link href="https://en.bitcoin.it/wiki/Protocol_documentation#tx" target="_blank" className="underline">こちら</Link> および <Link href="https://github.com/bitcoinbook/bitcoinbook/blob/6d1c26e1640ae32b28389d5ae4caf1214c2be7db/ch06_transactions.adoc" target="_black" className="underline">こちら</Link> に記載されています。`,
},
in_out_four: {
  normal: {
    title: `入出力の基本`,
    nav_title: `Input クラス`,
    heading: `Input クラスの実装を見てみよう`,
    paragraph_one: `ここでは、<span className="font-bold">Input</span> クラスと <span className="font-bold">Outpoint</span>（"output" ではありません）クラスのコードを扱います。`,
    paragraph_two: `入力（Input）は、未使用トランザクション出力（UTXO）から取得されます。<span className="text-green p-1 font-mono bg-[#00000033] m-1 text-base">from_output()</span> メソッドに出力の情報を渡すと、Input クラスのインスタンスが生成されます：`,
    paragraph_three: `最初の2つの引数は以下のとおりです：`,
    paragraph_four: `1. <span className="font-bold">txid：</span>その出力を作成したトランザクションのID`,
    paragraph_five: `2. <span className="font-bold">vout：</span>その出力がトランザクション内で何番目かを示すインデックス`,
    paragraph_six: `この2つの情報を組み合わせたものが <span className="font-bold">Outpoint</span> です。前の演習で <span className="text-green p-1 font-mono bg-[#00000033] m-1 text-base">listunspent</span> コマンドを実行した際に得られた txid と vout の値を最終的にここに使うことになります。`,
    paragraph_seven: `次の2つの引数は、使用したい出力の金額（サトシ単位）と、scriptcode と呼ばれるものです。これらのデータは後で必要になるため、今は空のバイト配列を仮で使っておきます。`,
    paragraph_eight: {
      a: `ビットコインではハッシュ値は`,
      b: {
        text: `逆順に扱われます`,
        question: `なぜビットコインではハッシュを逆順にするの？`,
        href: `https://chat.bitcoinsearch.xyz/?author=holocat&question=why%2520are%2520hashes%2520reversed%2520in%2520bitcoin`,
      },
      c: `が、それはユーザーに提示するときや入力させるときに限られます。16進数で表されたハッシュをバイト列として保存・送信する際には、バイト順を反転させる必要があります。`,
    },
    paragraph_nine: `この処理は、<span className="text-green p-1 font-mono bg-[#00000033] m-1 text-base">from_output()</span> メソッド内で txid を扱う部分に見られます。`,
    paragraph_ten: `また、トランザクションをネットワークでやり取りしたりブロックに記録したりするには、仕様に従ってバイト配列を返す <span className="text-green p-1 font-mono bg-[#00000033] m-1 text-base">serialize()</span> メソッドが必要です。`,
    heading_three: `Outpoint`,
    table_one: {
      heading: {
        one: `説明`,
        two: `名前`,
        three: `タイプ`,
        four: `サイズ`,
      },
      row_one: {
        column: {
          one: `使用する元のトランザクションのハッシュ`,
          two: `txid`,
          three: `bytes`,
          four: `32`,
        },
      },
      row_two: {
        column: {
          one: `出力配列内で使用する出力の位置`,
          two: `index`,
          three: `int`,
          four: `4`,
        },
      },
    },
    heading_four: `Input`,
    table_two: {
      row_one: {
        column: {
          one: `使用する txid と出力インデックス`,
          two: `outpoint`,
          three: `bytes`,
          four: `36`,
        },
      },
      row_two: {
        column: {
          one: `ScriptSig の長さ（SegWitでは常に0）`,
          two: `length`,
          three: `int`,
          four: `1`,
        },
      },
      row_three: {
        column: {
          one: `SegWit では常に空`,
          two: `script`,
          three: `bytes`,
          four: `0`,
        },
      },
      row_four: {
        column: {
          one: `デフォルト値は 0xffffffff（相対タイムロックにも使用可能）`,
          two: `sequence`,
          three: `int`,
          four: `4`,
        },
      },
    },
    paragraph_eleven: {
      a: `注意：ビットコインでは整数は `,
      b: {
        text: `リトルエンディアン`,
        question: `エンディアンって何？`,
        href: `https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520endianness%253F`,
      },
    },
    success: `Input クラスはうまく実装できました。お見事！`,
  },
hard: {
  title: `入出力の基本`,
  nav_title: `Input クラスを構築する`,
  heading: `Input クラスの実装を完成させよう`,
  paragraph_one: `このクラスには、以下のメソッドを実装する必要があります：`,
  paragraph_two: `最初の2つの引数は、使用したい出力を含むトランザクションのID（txid）と、その出力のインデックス（vout）です。`,
  paragraph_three: `最終的には、上で listunspent コマンドから取得した txid と vout をこのメソッドに渡すことになります。なお、ビットコインにおけるハッシュはリトルエンディアン（little-endian）で表現されるため、txid の文字列のバイト順は反転させる必要があります！`,
  paragraph_four: `次の2つの引数は、使用したい出力の金額（サトシ単位）と scriptcode と呼ばれるものです。これらはステップ6までは使わないので、今は Input クラスのプロパティとして保持しておくだけでかまいません。`,
  paragraph_five: `さらに、仕様に従ってバイト配列を返す <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドも必要です：`,
  heading_two: `Outpoint`,
  table_one: {
    heading: {
      one: `説明`,
      two: `名前`,
      three: `タイプ`,
      four: `サイズ`,
    },
    row_one: {
      column: {
        one: `使用元のトランザクションのハッシュ`,
        two: `txid`,
        three: `bytes`,
        four: `32`,
      },
    },
    row_two: {
      column: {
        one: `そのトランザクションの出力配列内における位置`,
        two: `index`,
        three: `int`,
        four: `4`,
      },
    },
  },
  heading_three: `Input`,
  table_two: {
    row_one: {
      column: {
        one: `使用する txid と出力インデックス`,
        two: `outpoint`,
        three: `bytes`,
        four: `36`,
      },
    },
    row_two: {
      column: {
        one: `ScriptSig の長さ（SegWitでは常に0）`,
        two: `length`,
        three: `int`,
        four: `1`,
      },
    },
    row_three: {
      column: {
        one: `SegWit では常に空`,
        two: `script`,
        three: `bytes`,
        four: `0`,
      },
    },
    row_four: {
      column: {
        one: `デフォルト値は 0xffffffff（相対タイムロックにも使用可能）`,
        two: `sequence`,
        three: `int`,
        four: `4`,
      },
    },
  },
  success: `Input クラスはうまく実装できました。素晴らしい！`,
    },
  },
in_out_five: {
  title: `入出力の基本`,
  nav_title: `Output クラスを構築する`,
  heading: `Output クラスの実装を完成させよう`,
  paragraph_one: `Input クラスと同様に、ユーザーが入力したデータから Output オブジェクトを作成する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">from_options()</span> メソッドが必要です：`,
  paragraph_two: `このメソッドは、ビットコインアドレス（たとえばミカ3000のアドレス）を表す文字列と、サトシ単位の金額（整数）を受け取ります。1 BTC = 100000000 サトシ であることを忘れずに！アドレスは bech32 ライブラリを使ってデコードし、バージョンとデータ成分を取得する必要があります。
    また、このクラスには、仕様に従ってバイト配列を返す <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドも必要です：`,
  heading_two: `Output`,
  table: {
    heading: {
      one: `説明`,
      two: `名前`,
      three: `タイプ`,
      four: `サイズ`,
    },
    row_one: {
      column: {
        one: `送信するサトシの数量`,
        two: `value`,
        three: `bytes`,
        four: `8`,
      },
    },
    row_two: {
      column: {
        one: `この後に続くスクリプト（witness program）の全体の長さ`,
        two: `length`,
        three: `int`,
        four: `1`,
      },
    },
    row_three: {
      column: {
        one: `Segregated Witness のバージョン。bech32アドレスから取得`,
        two: `version`,
        three: `int`,
        four: `1`,
      },
    },
    row_four: {
      column: {
        one: `この後に続く witness program データの長さ`,
        two: `length`,
        three: `int`,
        four: `1`,
      },
    },
    row_five: {
      column: {
        one: `bech32アドレスから派生したデータコンポーネント`,
        two: `index`,
        three: `bytes`,
        four: `(可変)`,
      },
    },
  },
  paragraph_three: `お忘れなく：ビットコインにおける整数はリトルエンディアン形式でシリアライズされます！`,
  success: `Output クラスはうまく実装できました。素晴らしい！`,
}
put_it_together_one: {
  title: `すべてを組み合わせる`,
  normal: {
    title: `すべてを組み合わせる`,
    nav_title: `トランザクションダイジェストを構築`,
    heading: `トランザクションダイジェスト`,
    paragraph_one: `第5章で学んだとおり、トランザクションに署名するには、まずトランザクションデータを並べ替えてハッシュ化し、署名アルゴリズムに渡すメッセージを作成する必要があります。今回は Segregated Witness を採用しているため、<Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link> で定義されている改良版のトランザクションダイジェスト・アルゴリズムを実装しなければなりません。`,
    paragraph_two: `各インプットにはそれぞれ専用の署名が必要です。そのため、ダイジェスト計算の一部はキャッシュして再利用できますが、どのインプットに署名するかによって変わる部分もあります。32 バイトの署名メッセージを生成する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest(input_index)</span> メソッドを完成させましょう。`,
    list_heading: `注意事項：`,
    list_one: `「ダブル SHA-256」(dSHA256) ＝ sha256(sha256(data))`,
    list_two: `value は、署名対象インプットが消費する出力のサトシ額です。ステップ2で Input クラスに保存しておきましたね。`,
    list_three: `scriptcode は評価対象となるビットコインスクリプトそのものです。これもステップ2で Input クラスに追加しました。`,
    list_four: `整数はすべてリトルエンディアンでエンコード！`,
    paragraph_three: `詳細は次のセクションで掘り下げますが、あなたの P2WPKH アドレスを使って送金する場合、scriptcode は次のようになります：`,
    paragraph_four: `…これをデコードすると、以下のビットコインスクリプトになります。`,
    paragraph_five: `scriptcode について詳しくは <Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link> を参照してください。`,
    paragraph_six: `署名前のトランザクションの「プレイメージ（preimage）」は、次の項目をシリアライズしたものです：`,
    headings: {
      item_one: `説明`,
      item_two: `名前`,
      item_three: `タイプ`,
      item_four: `サイズ`,
    },
    table: {
      row_one: {
        item_one: `トランザクションバージョン（デフォルト 2）`,
        item_two: `version`,
        item_three: `int`,
        item_four: `4`,
      },
      row_two: {
        item_one: `すべてのインプットの outpoint をシリアライズし dSHA256`,
        item_two: `outpoints`,
        item_three: `bytes`,
        item_four: `32`,
      },
      row_three: {
        item_one: `すべてのインプットの sequence 値をシリアライズし dSHA256`,
        item_two: `sequences`,
        item_three: `bytes`,
        item_four: `32`,
      },
      row_four: {
        item_one: `署名対象インプットの outpoint（シリアライズ済み）`,
        item_two: `outpoint`,
        item_three: `bytes`,
        item_four: `36`,
      },
      row_five: {
        item_one: `消費される出力スクリプト（scriptcode）`,
        item_two: `scriptcode`,
        item_three: `bytes`,
        item_four: `(可変)`,
      },
      row_six: {
        item_one: `署名対象インプットが消費する出力のサトシ額`,
        item_two: `value`,
        item_three: `int`,
        item_four: `8`,
      },
      row_seven: {
        item_one: `署名対象インプットの sequence 値`,
        item_two: `sequence`,
        item_three: `int`,
        item_four: `4`,
      },
      row_eight: {
        item_one: `すべてのアウトプットをシリアライズし dSHA256`,
        item_two: `outputs`,
        item_three: `bytes`,
        item_four: `32`,
      },
      row_nine: {
        item_one: `トランザクションの locktime（デフォルト 0）`,
        item_two: `locktime`,
        item_three: `int`,
        item_four: `4`,
      },
      row_ten: {
        item_one: `署名ハッシュタイプ（1 = ALL）`,
        item_two: `sighash`,
        item_three: `int`,
        item_four: `4`,
      },
    },
    paragraph_seven: `最後に、署名に用いるメッセージは、このシリアライズ済みデータ全体のダブル SHA-256 ハッシュです。`,
    success: `digest() メソッドは正しく実装されています。お見事！`,
  },
hard: {
  title: `すべてを組み合わせる`,
  nav_title: `Witnessクラスを構築`,
  heading: `Witnessクラスの実装を完成させよう`,
  paragraph_one: `このクラスには、バイト配列を受け取り、それをwitness stackに追加するメソッドを実装する必要があります。`,
  paragraph_two: `また、witness stackをシリアライズして返す <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドも必要です。`,
  subheading_one: `witness stack`,
  headings: {
    item_one: `説明`,
    item_two: `名前`,
    item_three: `タイプ`,
    item_four: `サイズ`,
  },
  table_one: {
    row_one: {
      item_one: `witness stack内のアイテム数`,
      item_two: `count`,
      item_three: `int`,
      item_four: `1`,
    },
    row_two: {
      item_one: `シリアライズされたstackアイテム`,
      item_two: `items`,
      item_three: `(items)`,
      item_four: `(可変)`,
    },
  },
  subheading_two: `witness stackのアイテム`,
  table_two: {
    row_one: {
      item_one: `この後に続くstackアイテムの全体の長さ`,
      item_two: `length`,
      item_three: `int`,
      item_four: `1`,
    },
    row_two: {
      item_one: `stackアイテムの未加工のバイト列`,
      item_two: `data`,
      item_three: `bytes`,
      item_four: `(可変)`,
    },
  },
  success: `Witnessクラスは正しく実装されています。お見事！`,
    },
  },
put_it_together_two: {
  normal: {
    title: `すべてを組み合わせる`,
    nav_title: `Witnessクラスを構築`,
    heading: `署名してWitnessを埋めよう！`,
    paragraph_one: `前章では、ECDSA署名の検証に必要なコードをいくつか書きました。今回は、有効な署名を生成するために、それらのコードを少し書き換えて使用します。`,
    paragraph_two: `この演習では、ECDSA署名アルゴリズムの基礎となる数学の一部を実装します。アルゴリズムの詳細については、以下の資料を参照してください：`,
    paragraph_three: `・<Link href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" className="underline">Elliptic Curve Digital Signature Algorithm</Link> のWikipediaページ`,
    paragraph_four: `・<Link href="https://www.secg.org/sec1-v2.pdf#subsubsection.4.1.3" target="_blank" className="underline">Standards for Efficient Cryptography 1（SEC 1）</Link>：44ページ、セクション4.1.3`,
    heading_one: `ステップ 1`,
    paragraph_five: `Transactionクラスには <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">compute_input_signature(index, key)</span> というメソッドがあります。このメソッドは、インプットのインデックス番号と秘密鍵（32バイトの整数。JavaScriptではBigInt）を受け取ります。これを完成させて、対象インプットのメッセージダイジェストを生成しましょう。前のステップで作成した <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">digest()</span> メソッドを使ってから、ECDSA署名（32バイトの整数である <span className="italic">r</span> と <span className="italic">s</span>）を返してください。`,
    heading_two: `ステップ 2`,
    paragraph_six: `Bitcoinプロトコルでは、署名アルゴリズムにおいてもう1つ条件があります。<span className="italic">s</span> 値は「低い（low）」必要があり、これは楕円曲線のオーダーの半分未満であることを意味します。<span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">compute_input_signature()</span> にこのチェックを追加してください。`,
    paragraph_seven: `詳しくは <Link href="https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#low_s" target="_blank" className="underline">BIP 146</Link> を参照。`,
    heading_three: `ステップ 3`,
    paragraph_eight: `<span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">sign_input(index, key)</span> メソッドを完成させ、<span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">compute_input_signature(index, key)</span> を呼び出すようにしてください。戻り値である <span className="italic">r</span> と <span className="italic">s</span> は、あらかじめ用意されたDERエンコーディングアルゴリズムで符号化する必要があります。`,
    heading_four: `ステップ 4`,
    paragraph_nine: `Bitcoinでは、DER署名の末尾に1バイトを追加する必要があります。このバイトは「sighash type」を示すもので、今回は常に <span className="p-1 text-base font-mono bg-[#0000004D] m-1">0x01</span>（SIGHASH ALLを意味）を使用します。`,
    heading_five: `ステップ 5`,
    paragraph_ten: `最後のステップでは、2つのスタックアイテム（先ほど作成したDER署名データと、圧縮された公開鍵）を含むWitnessオブジェクトを作成します。署名を先に、公開鍵を後にプッシュしてください。`,
    paragraph_eleven: `このwitness stackオブジェクトを、Transactionオブジェクトのwitnesses配列に追加しましょう。`,
    success: `compute_input_signature() および sign_input() メソッドは正しく実装されています。素晴らしい！`,
  },
hard: {
  title: `すべてを組み合わせる`,
  nav_title: `トランザクションをシリアライズ`,
  heading: `Transactionクラスの実装を完成させよう`,
  paragraph_one: `このクラスには、locktime と version のグローバルプロパティに加えて、inputs、outputs、witnessスタックの配列が必要です。`,
  paragraph_two: `また、ビットコインのP2Pネットワーク上でブロードキャストできる形式で、トランザクション全体をバイト列として出力する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドも実装する必要があります。`,
  headings: {
    item_one: `説明`,
    item_two: `名前`,
    item_three: `タイプ`,
    item_four: `サイズ`,
  },
  table: {
    row_one: {
      item_one: `現在の標準では 2 が使われる`,
      item_two: `version`,
      item_three: `int`,
      item_four: `4`,
    },
    row_two: {
      item_one: `SegWit対応の場合は必ず0x0001`,
      item_two: `flags`,
      item_three: `bytes`,
      item_four: `2`,
    },
    row_three: {
      item_one: `インプットの数`,
      item_two: `in count`,
      item_three: `int`,
      item_four: `1`,
    },
    row_four: {
      item_one: `すべてのトランザクションインプット（シリアライズ済み）`,
      item_two: `inputs`,
      item_three: `Inputs[]`,
      item_four: `(可変)`,
    },
    row_five: {
      item_one: `アウトプットの数`,
      item_two: `out count`,
      item_three: `int`,
      item_four: `1`,
    },
    row_six: {
      item_one: `すべてのトランザクションアウトプット（シリアライズ済み）`,
      item_two: `outputs`,
      item_three: `Outputs[]`,
      item_four: `(可変)`,
    },
    row_seven: {
      item_one: `すべてのwitnessスタック（シリアライズ済み）`,
      item_two: `witness`,
      item_three: `Witnesses[]`,
      item_four: `(可変)`,
    },
    row_eight: {
      item_one: `0に設定するとfinal（確定）を示す`,
      item_two: `locktime`,
      item_three: `int`,
      item_four: `4`,
    },
  },
  paragraph_three: `witnessesには「count」値が存在しない点に注意してください。これは、witnessスタックの数がインプットの数と常に完全に一致していなければならないためです。`,
  success: `serialize() メソッドは正しく実装されています。お見事！`,
   },
  },
put_it_together_three: {
  normal: {
    title: `すべてを組み合わせよう`,
    nav_title: `トランザクションに署名`,
    heading: `Transactionクラスの実装を完成させよう`,
    paragraph_one: `トランザクションを完成させるには、ビットコインのP2Pネットワーク上でブロードキャストできる形式でトランザクション全体をバイト列として出力する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドが必要です。`,
    paragraph_two: `スクリプトでは、Transactionオブジェクトを作成し、署名を行います。このトランザクションには1つのインプット（<span className="underline">Inputクラス</span>で指定したUTXO）と、2つのアウトプットが含まれます：`,
    paragraph_three: `インプットとアウトプットは分かっています。では、もうトランザクションを作って署名していいのでしょうか？まだです。1.61 BTC のインプットがあり、1 BTC のアウトプットがあります... 残りの 0.61 BTC はどこへ？これは「おつり」として自分のアドレスに返す必要があります。`,
    paragraph_four: `witnesses には「count」フィールドが存在しないことに注意してください。これは、witnessスタックの数がインプットの数と常に一致していなければならないためです。`,
    paragraph_five: `でも、ちょっと待ってください！「手数料」も必要です。おつりから少しだけ差し引いて、マイニングプールにインセンティブを与え、ブロックに含めてもらいましょう。今回はおつりを 61,000,000 satoshi に設定します。`,
    paragraph_six: `ついにすべて完了です。スクリプトの最後では、<span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドの戻り値を返しましょう。これは署名済みの有効なビットコイントランザクションであり、ミカ3000 に送金するためにネットワークにブロードキャストできます！`,
    headings: {
      item_one: `説明`,
      item_two: `名前`,
      item_three: `タイプ`,
      item_four: `サイズ`,
    },
    table: {
      row_one: {
        item_one: `現在の標準では 2 が使われる`,
        item_two: `version`,
        item_three: `int`,
        item_four: `4`,
      },
      row_two: {
        item_one: `SegWit対応の場合は必ず0x0001`,
        item_two: `flags`,
        item_three: `bytes`,
        item_four: `2`,
      },
      row_three: {
        item_one: `インプットの数`,
        item_two: `in count`,
        item_three: `int`,
        item_four: `1`,
      },
      row_four: {
        item_one: `すべてのトランザクションインプット（シリアライズ済み）`,
        item_two: `inputs`,
        item_three: `Inputs[]`,
        item_four: `(可変)`,
      },
      row_five: {
        item_one: `アウトプットの数`,
        item_two: `out count`,
        item_three: `int`,
        item_four: `1`,
      },
      row_six: {
        item_one: `すべてのトランザクションアウトプット（シリアライズ済み）`,
        item_two: `outputs`,
        item_three: `Outputs[]`,
        item_four: `(可変)`,
      },
      row_seven: {
        item_one: `すべてのwitnessスタック（シリアライズ済み）`,
        item_two: `witness`,
        item_three: `Witnesses[]`,
        item_four: `(可変)`,
      },
      row_eight: {
        item_one: `0に設定するとfinal（確定）を示す`,
        item_two: `locktime`,
        item_three: `int`,
        item_four: `4`,
      },
    },
  bullet_one: `ミカ3000に 100,000,000 satoshi（1 BTC）を送る → アドレス: bc1qgghq08syehkym52ueu9nl5x8gth23vr8hurv9dyfcmhaqk4lrlgs28epwj`,
  bullet_two: `あなたに 61,000,000 satoshi（おつり）を返す → アドレス: bc1qm2dr49zrgf9wc74h5c58wlm3xrnujfuf5g80hs`, 
    success: `やりましたね！トランザクションが完成しました！`,
  },
hard: {
  title: `すべてを組み合わせる`,
  nav_title: `トランザクションダイジェストの構築`,
  heading: `トランザクションダイジェスト`,
  paragraph_one: `第5章では、トランザクションに署名するには、まずそのデータを並べ替えてハッシュ化し、署名アルゴリズムへの入力となるメッセージを作成する必要があると学びました。現在は Segregated Witness（SegWit）を使っているため、<Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link> で定義された、新しいトランザクションダイジェストアルゴリズムを実装する必要があります。`,
  paragraph_two: `すべてのトランザクション入力には、それぞれ固有の署名が必要であることを思い出してください。そのため、ダイジェストアルゴリズムの一部の要素はキャッシュして再利用できますが、署名対象のインプットによって変わる部分もあります。入力に署名するための32バイトのメッセージを計算する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest(input_index)</span> メソッドを完成させましょう。`,
  list_heading: `補足：`,
  list_one: `"Double SHA-256"（または dSHA256）= sha256(sha256(data))`,
  list_two: `value は、使用しているUTXOの出力に含まれるsatoshiの量を表します。これはステップ2で Input クラスに追加し、今までそのまま保存してきました。`,
  list_three: `scriptcode は評価対象となるビットコインスクリプトそのものです。これもステップ2で Input クラスに追加済みです。`,
  paragraph_three: `次のセクションで詳しく説明しますが、Pay-to-Witness-Public-Key-Hash アドレスから出金するための scriptcode は以下のようになります：`,
  paragraph_four: `…これをデコードすると、以下のビットコインスクリプトになります。`,
  paragraph_five: `scriptcode の詳細については、<Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link> を参照してください。`,
  paragraph_six: `このトランザクションのプレイメージ（preimage）は、以下の要素をシリアライズしたものになります：`,
  headings: {
    item_one: `説明`,
    item_two: `名前`,
    item_three: `タイプ`,
    item_four: `サイズ`,
  },
table: {
  row_one: {
    item_one: `トランザクションのバージョン。通常は2が使われる`,
    item_two: `version`,
    item_three: `int`,
    item_four: `4`,
  },
  row_two: {
    item_one: `すべてのインプットのoutpointをシリアライズし、dSHA256を適用した値`,
    item_two: `bytes`,
    item_three: `bytes`,
    item_four: `32`,
  },
  row_three: {
    item_one: `すべてのインプットのsequence値をシリアライズし、dSHA256を適用した値`,
    item_two: `sequences`,
    item_three: `bytes`,
    item_four: `32`,
  },
  row_four: {
    item_one: `署名対象となる単一のインプットのoutpoint（シリアライズ済み）`,
    item_two: `outpoint`,
    item_three: `bytes`,
    item_four: `36`,
  },
  row_five: {
    item_one: `使用している出力のスクリプト（scriptcode）`,
    item_two: `scriptcode`,
    item_three: `bytes`,
    item_four: `(可変)`,
  },
  row_six: {
    item_one: `署名対象の単一のインプットが使用しているsatoshiの量`,
    item_two: `value`,
    item_three: `int`,
    item_four: `8`,
  },
  row_seven: {
    item_one: `署名対象の単一のインプットのsequence値`,
    item_two: `sequence`,
    item_three: `int`,
    item_four: `8`,
  },
  row_eight: {
    item_one: `すべてのアウトプットをシリアライズし、dSHA256を適用した値`,
    item_two: `outputs`,
    item_three: `bytes`,
    item_four: `32`,
  },
  row_nine: {
    item_one: `トランザクションのlocktime。通常は0`,
    item_two: `locktime`,
    item_three: `int`,
    item_four: `4`,
  },
  row_ten: {
    item_one: `Signature Hash Type（署名ハッシュの種類）。ここでは "ALL" を示す 1 を使用`,
    item_two: `sighash`,
    item_three: `int`,
    item_four: `4`,
  },
},
paragraph_seven: `最後に、これらすべてのシリアライズ済みデータに対して Double SHA-256 を適用したものが、署名対象のメッセージになります。`,
success: `digest() メソッドは問題ありません。素晴らしい出来です！`,
  },
},
put_it_together_four: {
  hard: {
    title: `すべてを組み合わせる`,
    heading: `署名しよう！`,
    nav_title: `トランザクションに署名`,
    paragraph_one: `前の章でECDSA署名の検証コードを書きましたが、今回はそれを少し変更して有効な署名を作成します。Transactionクラスに <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">compute_input_signature(index: int, key: int)</span> というメソッドを追加しましょう。これは、入力のインデックス番号と秘密鍵（32バイトの整数）を受け取り、ステップ6の <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest()</span> メソッドを使って選択したインプットのメッセージダイジェストを計算し、32バイトの整数2つ（rとs）からなるECDSA署名を返します。`,
    paragraph_two: `ECDSAの署名アルゴリズムについては <Link href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" className="underline">こちらのページ</Link> をご覧ください。また、<Link href="https://www.secg.org/sec1-v2.pdf#subsubsection.4.1.3" target="_blank" className="underline">こちらのPDF</Link>（44ページ、セクション4.1.3）も参考になります。`,
    paragraph_three: `ビットコインプロトコルでは、追加の要件として「sの値は曲線のオーダーの半分未満（low s）でなければならない」というルールがあります。詳しくは <Link href="https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#low_s" target="_blank" className="underline">BIP 146</Link> を参照してください。`,
    success: `compute_input_signature() メソッドは問題ありません。素晴らしい出来です！`,
  },
},
put_it_together_five: {
  hard: {
    title: `すべてを組み合わせる`,
    heading: `Witnessを埋めよう`,
    nav_title: `Witnessを埋めよう`,
    paragraph_one: `ステップ7で作成した <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">compute_input_signature(index, key)</span> を呼び出し、その戻り値を処理する <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">sign_input(index: int, key: int)</span> メソッドを完成させましょう。rとsの数値は、DERというアルゴリズムでエンコードする必要がありますが、これはすでに実装されています。`,
    paragraph_two: `ビットコインでは、DER署名に追加で1バイトの「sighash type」を付け加える必要があります。ここでは常に0x01を使い、"SIGHASH ALL" を表します。`,
    paragraph_three: `この署名バイナリが完成したら、2つのスタック項目（署名と圧縮公開鍵）を持つ Witness オブジェクトを作成します。まず署名、次に公開鍵の順でプッシュしてください。`,
    paragraph_four: `そのWitnessオブジェクトは、トランザクションオブジェクトのwitnesses配列に追加できます。`,
    success: `sign_input() メソッドは問題ありません。素晴らしい出来です！`,
  },
},
put_it_together_six: {
  hard: {
    title: `すべてを組み合わせる`,
    heading: `すべて組み上げよう`,
    nav_title: `すべてを組み上げよう！`,
    paragraph_one: `インプットも分かっていて、アウトプットも分かっている。じゃあトランザクションを作って署名できる？…まだです。1.61 BTCのインプットと1 BTCのアウトプットがあります。残りの0.61 BTCは？ほとんどは「おつり」として自分のアドレスに戻す必要があります。`,
    paragraph_two: `スクリプトを書いて、Transactionオブジェクトを作成し、署名しましょう。インプットは1つ（ステップ1で特定したUTXO）、アウトプットは2つです：`,
    paragraph_three: `でも、ちょっと待ってください！「手数料」も必要です。おつりから少しだけ差し引いて、マイニングプールにインセンティブを与え、ブロックに含めてもらいましょう。今回はおつりを 61,000,000 satoshi に設定します。`,
    paragraph_four: `ついに完成です。スクリプトの最後では、トランザクションの <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> メソッドの戻り値を返しましょう。これは有効な署名済みビットコイントランザクションで、ミカ3000 に送金するためにネットワークにブロードキャストできます！`,
    bullet_one: `ミカ3000 に 100,000,000 satoshi（1 BTC）を送る → アドレス: bc1qgghq08syehkym52ueu9nl5x8gth23vr8hurv9dyfcmhaqk4lrlgs28epwj`,
    bullet_two: `あなたに 61,000,000 satoshi（おつり）を返す → アドレス: bc1qm2dr49zrgf9wc74h5c58wlm3xrnujfuf5g80hs`,
    success: `やりましたね！トランザクションが完成しました！`,
  },
},
outro_one: {
  title: `アウトロ`,
  nav_title: `チャプター完了`,
  heading: `成功！`,
  paragraph_one: `ミカ3000への支払いのために、ゼロからトランザクションを構築することに成功しました。ここまで来たら、次はヴァンダープールの島で何が見つかるか見てみましょう。`,
},
book_a_call_one: {
  title: 'BDPと話そう',
  nav_title: 'BDPとの面談予約',
  heading: 'Bitcoin Dev Projectと話してみませんか？',
  paragraph_one:
    '―ミカ3000：「トランザクションを一から作り上げたのはお見事でした。公開鍵と秘密鍵のペアでビットコインアドレスを作るところから、ヴァンダープールの署名が不正であることの証明まで、あなたのスキルは確かです。」',
  paragraph_two:
    '「このビットコインのオープンソースソフトウェア（BOSS）の世界について、もっと話してみませんか？<Link className="!underline" target="_blank" href="https://bitcoindevs.xyz" /> Bitcoin Dev Project </Link> の知り合いを紹介できますよ。彼らは常に、あなたのような優秀なコーダーを探していて、ビットコインを未来の通貨以上の存在にするために、開発・強化・セキュリティ面での貢献を求めています。」',
  paragraph_three:
    'このリンクからカレンダーに進むと、Bitcoin Dev Project のメンバーと実際にビデオ通話を予約できます。ビットコインのオープンソースソフトウェアへの関わり方やキャリアの可能性について話すことができます。なお、この面談は Saving Satoshi のゲームとは完全に別のもので、辞退してもゲームの進行には影響しません。',
  button_text_one: '面談を予約する',
  button_text_two: 'ゲームを続ける',
},
resources: {
  in_out: {
    input_class_heading: `Input クラス`,
    input_class_paragraph_one: `リソース準備中`,
    output_class_heading: `Output クラス`,
    output_class_paragraph_one: `リソース準備中`,
  },
  put_it_together: {
    building_a_transaction_heading: `トランザクションの構築`,
    building_a_transaction_paragraph_one: `リソース準備中`,
      },
    },
  },
chapter_seven: {
  title: `攻撃こそ最大の防御`,
  paragraph_one: `あなたとミカ3000は、まず飛行機とパラシュートで、次にバギー、最後は自動で漕ぐボートで、ヴァンダープールの私有島に到着しました。`,
  intro_one: {
    title: `イントロ`,
    nav_title: `施設への潜入`,
    paragraph_one: `あなたは仲間たちに、ヴァンダープールの警備ドローン軍団について心配しているか尋ねます。`,
    paragraph_two: `―ホロキャット：「15分ほしいニャ。あいつらは基本的に鳥みたいなもので、私はネコにゃ。敵うわけないニャン。」`,
    paragraph_three: `ホロキャットは爪を伸ばし、ヴァンダープールのドローン軍を次々と叩き落としていきました。ミカ3000は、黒のタートルネック、手袋、そして暗視ゴーグルをあなたに手渡します。`,
    paragraph_four: `―ミカ3000：「スパイ活動にアロハシャツで来るなんて……いったい何を考えてるんですか？ここはただの廃倉庫じゃありませんよ、要塞なんですから。あ、そうそう。うっかりしてました。このグラップリングフックもお持ちください。」`,
    paragraph_five: `「一体自分は何に巻き込まれてるんだ…？」と思いながら、あなたとミカ3000はヴァンダープールの主邸の城壁をよじ登ります。驚いたことに、屋敷の中はビットコイン関連のアートや本、紙の雑誌であふれていました。彼は、いや、かつては確かに本物のビットコイナーだったのです。125年の歴史を持つマイナーのコレクションがガラスケースの中で保存されています。そして、あなたは見つけます──ヴァンダープールの作業部屋を。`,
  },
  intro_two: {
    nav_title: `制御室`,
    paragraph_one: `その巨大な部屋は散らかっているものの、配置には秩序が見られます。かつてマイナーたちが空ブロックでビットコインネットワークを詰まらせていたことを覚えていますか？開いたノートの中に、ヴァンダープールが使っていたバックドアの設計図が詳細に描かれていました。あなたの予想は正しかったのです──これは悪意ある悪党による嘘ではなく、競争に敗れたビットコイン信奉者が遺産を残そうとしてついた、必死の嘘だったのです。ヴァンダープールはマイナーたちにウイルスを仕込んでいたのです。`,
    paragraph_two: `このウイルスは、マイナーがプールに属していようとなかろうと、すべてのマイナーが使うコードの一部を置き換えます。それは、トランザクションをブロックテンプレートにまとめるロジック、つまりブロック構築のアルゴリズムです。テンプレートは正規のハッシュ計算コードに渡されて、PoWの計算が行われます。テンプレートは何兆通りもの異なるナンスと組み合わされ、有効なハッシュが見つかるまで繰り返し試されますが、有効なハッシュが見つかる時点ではすでにテンプレートが空で、その時点で“損害”は完了しているのです。`,
    paragraph_three: `―ホロキャット：「残念ニャ。あの一族はかつて偉大だったのに、ヴァンダープール家がこんなことになるなんてニャン…」`,
  },
  intro_three: {
    nav_title: `ソフトウェアの修正`,
    paragraph_one: `でも、壊れたマイニングコードをヴァンダープールのサーバーにそのまま残しておくわけにはいきません。これでは、マイナーたちに感染が広がり続けてしまいます。あなたはそれを修正しなければなりません！コードを読み進めていると、ホロキャットは未確認トランザクションで埋まっていくmempoolディスプレイを見せてくれました。このコードは一刻も早く修正する必要があります。`,
  },
mempool_transaction_one: {
  title: `ブロック構築`,
  nav_title: `ブロックを組み立てる`,
  heading: `コードチャレンジ`,
  python: {
    paragraph_one: `これはヴァンダープールのサーバーで見つけたコードです。現在の mempool を JSON ファイルから読み込み、未承認トランザクションをすべて MempoolTransaction クラスのインスタンスとしてメモリに保持しています。ヴァンダープールが機能を潰してしまったのは <span className="text-green">assemble_block()</span> です。彼が残したままのコードを実行すれば、すぐに問題が分かるでしょう。`,
  },
  javascript: {
    paragraph_one: `これはヴァンダープールのサーバーで見つけたコードです。現在の mempool を JSON ファイルから読み込み、未承認トランザクションをすべて MempoolTransaction クラスのインスタンスとしてメモリに保持しています。ヴァンダープールが機能を潰してしまったのは <span className="text-green">assembleBlock()</span> です。彼が残したままのコードを実行すれば、すぐに問題が分かるでしょう。`,
  },
  paragraph_two: {
    a: `ブロック組み立て関数を修正して、有効なブロックを構築するだけでなく、手数料を最大化してマイナーが合意ルールの範囲で最も高い利益を得られるようにしなければなりません。特に注意すべき合意ルールは、ブロック内の総`,
    b: {
      text: `トランザクションウェイト`,
      href: `https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520weighted%2520units`,
      question: `Weighted Units とは？`,
    },
    c: `と、ブロック内の`,
    d: {
      text: `トランザクションの並び順`,
      href: `https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520order%2520do%2520transactions%2520need%2520to%2520be%2520in%2520a%2520block`,
      question: `ブロック内のトランザクション順序は？`,
    },
    e: `です。`,
  },
  paragraph_three: `ミッションを進めるうえで、次の前提を置いてかまいません：`,
  bullet_one: `mempool 内のすべてのトランザクションは、すでに有効と確認されている。`,
  bullet_two: `コインベーストランザクションと、それがブロックにもたらすウェイトは無視してよい。`,
  paragraph_four: `mempool の元データ（JSON形式）は <Link href="https://github.com/saving-satoshi/resources/blob/main/chapter-7/mempool.json" target="_blank" className="underline">こちら</Link> から閲覧できます。`,
  paragraph_five: `ある程度のパターンを把握できるように、抜粋を以下の表にまとめています。：`,
  headings: {
    item_one: `トランザクションID`,
    item_two: `手数料`,
    item_two_b: `サトシ`,
    item_three: `ウェイト`,
    item_three_b: `ウェイトユニット（WU）`,
    item_four: `先行Tx数`,
  },
  table_one: {
    footer: `残りのトランザクションデータは <Link href="https://github.com/saving-satoshi/resources/blob/main/chapter-7/mempool.json" target="_blank" className="underline">こちらの JSONファイル</Link> をご覧ください`,
  },
  poor: `有効なブロックですが、もっと手数料を稼げるはずです。より多くの手数料を集める方法を試してみましょう。`,
  good: `有効なブロックですが、まだ最大手数料には届いていません。さらに改善するか、このまま続行するかはお任せします。`,
  success: `有効なブロックであり、手数料も最適化されました。お見事！`,
},
outro_one: {
  title: `アウトロ`,
  nav_title: `チャプター完了`,
  heading: `やりましたね！`,
  paragraph_one: `あなたは施設から脱出し、無事に帰還します。ニュースが報じられると、投資家たちは一斉にBitRey株を売却し、ヴァンダープールの純資産は急落します。`,
},
resources: {
  mempool_transaction_one: {
    bytes_v_weight_heading: `バイトとウェイトユニットの違い`,
    bytes_v_weight_paragraph_one: `ビットコインのブロック構築において、「ウェイトユニット（WU）」と「バイト」は、トランザクションやブロックのサイズを測るための異なる指標です。`,
    bytes_v_weight_subheading_bytes: `バイト（Bytes）`,
    bytes_v_weight_paragraph_two: `バイトとは、トランザクションやブロックの実際のデータサイズを指します。シリアライズ（保存や転送可能な形式に変換）されたときの、トランザクションデータの実際のサイズです。Segregated Witness（SegWit）導入以前は、ブロックサイズの上限は1メガバイト（1MB）で、このバイト数で計測されていました。`,
    bytes_v_weight_subheading_wu: `ウェイトユニット（Weighted Units）`,
    bytes_v_weight_paragraph_three: `ウェイトユニットは、Bitcoin Improvement Proposal 141（<Link href="https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Other_consensus_critical_limits" target="_blank" className="undeline">BIP 141</Link>）でSegWitとともに導入された、より複雑な指標です。この仕組みにより、証人（witness）データの影響を分離して評価することで、より公平にブロックスペースを割り当てることができます。`,
    bytes_v_weight_paragraph_four: `今回のレッスンでは、最大ブロックサイズの計算にウェイトユニットを使用しているという点が重要です。各トランザクションにも同じ指標を使っているため、あなたの構築するブロックが最大値である4,000,000ウェイトユニットを超えないように注意してください。`,
      },
    },
  },

chapter_eight: {
  title: `2100万`,
  paragraph_one: `あなたの調査が話題になり、世間はあなたの話を聞きたがっています。あなたがホロキャットの鼻をポンと押すと、LARGE BIG NEWSスタジオのデボラ・チャンクからの出演招待状が現れます。真実を伝えることは重要です。あなたは再びバジェットコプターに飛び乗ります。`,
  intro_one: {
    title: `イントロ`,
    nav_title: `ヴァンダープールの欺瞞`,
    paragraph_one: `―デボラ・チャンク：「これらの文書は、トーマス・ヴァンダープールの嘘を暴くもので、間違いなく歴史的で…いや、スキャンダラスです。人々が最も知りたがっているのは、第一にあなたが単独で行動していたのかという点、そして第二に、その情報源です。」`,
    paragraph_two: `あなたはホロキャットのことだけを話します。そして、情報はミカ3000とあなたに直接届けられたもので、差出人はサトシ・ナカモトを名乗っていたと語ります。ただしあなたは、実際にはそれがハッカー集団ではないかと疑っています。この発言を受け、トーマス・ヴァンダープールが番組に直接電話をかけてきます。`,
  },
  intro_two: {
    title: `イントロ`,
    nav_title: `ヴァンダープールの怒り`,
    paragraph_one: `―トーマス・ヴァンダープール：「私の家族こそがサトシ・ナカモトだ！このとんでもない発言を聞いたか？彼は今、自らハッカーと手を組んでいたと認めたんだ！サトシ・ナカモトの名を使って、正当な我が家の遺産を奪おうとしている集団だぞ。この悪党は、正当なビットコイナーたちの報酬廃止に対する抗議活動を妨害しようとしているんだ！」`,
    paragraph_two: `ヴァンダープールは、200年前のような罵倒をあなたに浴びせ続けます。あなたを「害獣」「卑劣漢」「腰抜け」「新参者」などと呼びます。あなたは彼に少しばかり、同情さえ感じます。ヴァンダープール家がビットコインの歴史において重要な存在だったことは否定できないのです――たとえサトシ・ナカモトについての彼の主張が明らかに虚偽であったとしても。`,
  },
  intro_three: {
    intro: `イントロ`,
    nav_title: `ヴァンダープールへの告発`,
    paragraph_one: `―デボラ・チャンク：「ヴァンダプールさん、よろしいでしょうか。多くの人が困惑し、ビットコインの供給量が改ざんされたのではないかと不安に思っています。あなたは、疑惑の改ざんに全く関与していないことを証明できますか？そして、謎のハッカーさんとそのホロキャットさん、あなたたちはヴァンダープール氏がビットコインに対してこのような犯罪を企てたことを証明できますか？」`,
  },
building_blocks_one: {
  title: `ブロック構築`,
  nav_title: `チェーンチップの特定`,
  paragraph_one: {
    a: `ヴァンダープールは、人々を混乱させるために、許可されている以上のビットコインを生成するブロックを採掘しようとしていることが分かっています。これは結果的にマネーサプライを膨張させる行為です。こうしたブロックは、プロトコルにハードコーディングされたルールに違反しているため無効ですが、バグのあるソフトウェアや、`,
    b: {
      text: `ライトクライアント`,
      href: `https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520light%2520clients%253F`,
      question: `ライトクライアントとは？`,
    },
    c: `のようにネットワークデータを完全に検証しないソフトを使っている一部の人々は、騙されてしまうかもしれません。`,
  },
  paragraph_two: `また、ネットワーク上のどこかには、ジェネシスブロックから現在の「チェーンチップ（現在もっとも正当なチェーンの最新ブロック）」まで、すべてのトランザクションとブロックがルールに従っている有効なブロックのチェーンが存在することも分かっています。このチェーンこそが唯一の<span className="italic">本物</span>のチェーンであり、唯一重要であり、2100万ビットコインという供給量が正しく保たれている唯一のチェーンです。`,
  paragraph_three: `今や世界中が注目するテレビの生放送中に、あなたはこの最も長い有効なブロックチェーンを見つけ出し、コイン供給量の整合性を証明しなければなりません。その過程で、ヴァンダープールがビットコインネットワークを無効なブロックの地雷原に変えていたことも明らかにできるでしょう。`,
},
building_blocks_two: {
  title: `ブロック構築`,
  nav_title: `ビットコインのブロックツリー`,
  paragraph_one: `すべてのブロックは必ずひとつの親ブロック（直前のブロック）を持ちますが、次のブロックは複数存在することがあります。このため、ビットコインのブロックは「チェーン」というより、「ツリー（木構造）」に近い形になります。いくつかの枝は行き止まりであり、そして証明すべきこととして、ヴァンダープールの悪巧みによって無効な枝も存在しています。`,
  paragraph_two: `この迷路のような構造のどこかに、ジェネシスブロックから現在の最新ブロックまで続く経路が存在します。あなたはその道を見つけ出し、このツリー構造における最も正当なチェーンの先端ブロックがどれかを、デボラ・チャンクに伝えなければなりません──次のCMが始まる前に！`,
  paragraph_three: `この図は、ビットコインのブロックチェーンを「ツリー」として芸術的に表現したもので、各ブロックが必ずひとつの親ブロックを持ち、複数の子ブロックを持つ可能性があることを示しています。各ブロックには、そのハッシュ値と親のハッシュ（<span className="p-1 font-mono m-0.5 text-sm">prev</span>）が表示されています。`,
  paragraph_four: `赤色のブロックは無効であることを示しています。ジェネシスブロックから始まる最長経路は緑色で表示され、「最も多くの作業（most work）」を要した、つまり「最も正当な」チェーンを表しています。このチェーン内のトランザクションだけが、本当に「確定された」ものです。他にも有効なブロック（青色）がありますが、「最も多くの作業」チェーンほど子孫ブロックが多くないため、<span className="italic">ステイルチップ</span>と呼ばれる終端ブロックで途切れています。`,
},
building_blocks_three: {
  title: `ブロック構築`,
  nav_title: `Bitcoin APIを探検しよう`,
  heading: `Bitcoin API`,
  paragraph_one: `これらの問いに答えるには、JSON-RPC API を通じてビットコインのフルノードとやり取りする必要があります。私たちは <span className="p-1 font-mono bg-[#0000004D] m-1">bitcoin_rpc</span> というライブラリを用意しており、このライブラリがスクリプトとフルノード間の安全なHTTP接続を処理し、コマンドの実行とレスポンスの取得を行います。あなたのノードは「プルーニング」設定なので、直近300ブロックのみ保持していますが、ヴァンダープールによる最近の悪行を追うには十分な範囲です。`,
  paragraph_two: `まずはこのAPIに慣れることから始めましょう。このライブラリには、1つの必須引数 <span className="p-1 font-mono bg-[#0000004D] m-1">method</span>（文字列）と、1つの任意引数 <span className="p-1 font-mono bg-[#0000004D] m-1">params</span>（文字列または数値のいずれか）を受け取る関数があります。`,
  paragraph_three: `このAPIには便利な "help" メソッドもあります！それを使って利用可能なコマンドを調べたら、ネットワークの現在の難易度（network difficulty）を表示してチャレンジをクリアしましょう。`,
  success: `APIの探検、お見事！次に進みましょう。`,
},
building_blocks_four: {
  title: `ブロック構築`,
  nav_title: `最小トランザクション数のブロックを探そう`,
  heading: `ブロックデータ`,
  paragraph_one: `すべてのビットコインフルノードにはデータベースがあります。ブロックはそこでハッシュごとに保存・索引化されます。ノードは、チェーンの各高さ（height）での候補ブロックを、高さ→[ブロックハッシュ] という形式の別のインデックスで管理しています。`,
  paragraph_two: `JSON-RPC API は、ブロックデータを JSON オブジェクトとして返します。これには、<span className="p-1 font-mono bg-[#0000004D] m-1">txs</span> というプロパティが含まれており、これはトランザクションオブジェクトの配列です。`,
  paragraph_three: `高さ 6929996 にあるすべてのブロック候補を取得し、最もトランザクション数が少ないブロックのハッシュを表示してください。`,
  success: `よくできました`,
},
building_blocks_five: {
  title: `ブロック構築`,
  nav_title: `トランザクション手数料を求めよう`,
  heading: `トランザクションデータ`,
  paragraph_one: `ブロックに取り込まれたトランザクションオブジェクトは、"inputs" と "outputs" という配列を含む JSON オブジェクトです。これらの配列は、UTXO（未使用トランザクション出力）のリスト、つまり「コイン」のリストです。コインオブジェクトには、satoshi 単位で表された <code>value</code> プロパティがあります。`,
  paragraph_two: `"inputs" 配列はそのトランザクションで使用された（破棄された）コインで、"outputs" 配列は新しく作られたコインです。第6章で学んだように、トランザクションはマイナーにブロックへの取り込みを促すため、必ず手数料を支払います。この手数料は、入力値の合計と出力値の合計の差額にあたります。`,
  paragraph_three: `つまり、送信されたビットコインのうち、受取人に送られなかった分が手数料としてマイナーのものになる、ということです。`,
  paragraph_four: `以下のトランザクションID（txid）のトランザクションがあります：`,
  paragraph_five: `このトランザクションは以下のブロックハッシュ内にあります：`,
  paragraph_six: `このトランザクションの手数料を satoshi 単位で出力してください。`,
  success: `よくできました！`,
},
building_blocks_six: {
  title: `ブロック構築`,
  nav_title: `新規発行分を求めよう`,
  heading: `コインベーストランザクション`,
  paragraph_one: `各ブロックの最初のトランザクションは「コインベース（coinbase）」と呼ばれます。これは「0番目」のトランザクション（txs[0]）と呼ばれることもあり、いくつか特別な性質を持っています。まず、入力がまったくありません！これは、既存のコインを消費していないからです。そして、その出力額（マイナーが受け取る金額）はプロトコルによって厳密に定義されています（ヴァンダープールが何を言おうとも！）。これが、マイナーが手数料と新規ビットコインを得る仕組みなのです。`,
  paragraph_two: `ブロック内のトランザクション手数料の合計を計算するのは比較的簡単ですが、それとは別に付与される「新規発行分」の値はどこから来るのでしょうか？ビットコインネットワークのすべての参加者が、マイナーがその時点で発行できるビットコイン量をどのように正確に判断しているのでしょうか？`,
  paragraph_three: `この仕組みは、サトシ・ナカモトによって設計され、ビットコインの誕生以来、変わることなく中核に存在し続けているアルゴリズムです：`,
  list_one: `2009年に採掘された最初のブロック（#1）から、ブロックごとの新規発行分は 50 BTC（= 5,000,000,000 サトシ）`,
  list_two: `21万ブロックごとに、その額は半分になります。`,
  paragraph_four: `たとえば、ブロック高 209,999 までは 50 BTC が発行され、次のブロック（210,000）では 25 BTC に減りました。以降も同様に半減が続きます。合計で63回の半減期を経ると、新規発行分はたった1サトシとなり、次の半減で発行は完全に終了します。`,
  paragraph_five: `そして、**その最後の半減が起きたのは、昨日です！**`,
  paragraph_six: `以下の関数を完成させてください。この関数は、引数としてブロック高を受け取り、その時点での新規発行分の値（サトシ単位）を返すものです。`,
  success: `get_subsidy 関数は完璧です。素晴らしい！`,
},
building_blocks_seven: {
  title: `ブロック構築`,
  nav_title: `有効なブロックを見つけよう`,
  heading: `なんて悪党だ！`,
  paragraph_one: `ブロック高 6929851 には4つのブロック候補があります。そのうち正当なブロックはひとつだけで、残りの3つはヴァンダープールの一味による、ビットコインの供給量を不当に膨らませようとする無謀な試みによって採掘されたものです。`,
  paragraph_two: `前のチャレンジで作成した「新規発行分（subsidy）」の関数と JSON-RPC API を使って、ブロック候補が正当かどうかを検証する関数を書いてください。検証のポイントは「コインベーストランザクションの出力が正しいかどうか」です。有効なブロックであれば true を返すようにしてください。`,
  paragraph_three: `以下のように、あなたのコードを使って、高さ6929851における正当なブロックをひとつ見つけます：`,
  success: `validate_block 関数は完璧です。素晴らしい！`,
},
  
building_blocks_eight: {
  title: `ブロック構築`,
  nav_title: `ショータイム！`,
  heading_one: `ショータイム！`,
  paragraph_one: `カメラは回り続け、世界中の20億人がライブ配信を見守っています。次のCMまであと数分。デボラ・チャンクは汗だく。なぜかホロキャットも汗をかいています。通話の向こうのどこかで、ヴァンダープールもきっと汗をかいているはず。今があなたの見せ場です。`,
  paragraph_two: `あなたが見つけたブロック（高さ6929851）のひとつ前の有効なブロックから始めて、最も長い有効なブロックチェーンを探しましょう。そのチェーンをブロックハッシュの配列として保存します。同時に、見つけた無効なブロックもすべて配列として記録しておきましょう。これはヴァンダープールがどれだけビットコインを壊そうとしたかを世界に示すためです。無効なブロックハッシュの順番は関係ありませんが、有効なチェーンは**必ず**ブロック6929850のハッシュから始まり、各高さにおける1つのブロックハッシュを順にたどってチェーンの先端まで続いていなければなりません。`,
  paragraph_three: `ヴァンダープールはずる賢いのです！無効なブロックの上に有効なブロックをマイニングしたり、短い有効チェーンの上に無効なブロックを積み重ねたりしています！それは迷路であり、地雷原のようなものです。ツリーをたどる際には、複数の有効な分岐を記録しておく必要があるかもしれません。有効な親を持つ有効なブロックでも、最長チェーンには含まれないものも存在するでしょう。最終的には、他のすべてよりも高い高さを持つたった1つの有効な末端ブロックが残ることになります。`,
  paragraph_four: `思い出してください：JSON APIで返されるブロックオブジェクトには、そのブロックの親をハッシュで示す "prev" というプロパティがあります：`,
  heading_two: `ブロックが有効であるための条件：`,
  paragraph_five: `そのコインベース出力額が、予想されるブロック報酬とそのブロック内の全トランザクション手数料の合計に等しいこと。`,
  heading_three: `そして`,
  paragraph_six: `そのブロックが、別の**有効な**ブロックの子であること。これにより**有効なチェーン**が保証されます。`,
  paragraph_seven: `結果として、"valid" と "invalid" というラベルのついた2つの配列を持つJSONオブジェクトを返してください：`,
  success: `showtime関数は完璧です。すばらしい仕事でした！`,
},
outro_one: {
  title: `アウトロ`,
  nav_title: `チャプター完了`,
  heading: `生放送でお届け中！`,
  paragraph_one: `あなたは最長のチェーンを見つけ、それをみんなに証明しました！発見された無効なブロックの一覧は驚くほどの長さです。ヴァンダープールは、不正な報酬を含むブロックを人々に受け入れさせようと必死に手を尽くしましたが、ビットコインのルールを変えることはできませんでした。ご覧のとおり、あるブロックがチェーンの一部であるからといって、それが有効であるとは限らないのです。これであなたは、ヴァンダープールの信頼をさらに失墜させる一歩を踏み出しました。言うまでもなく、彼はチャンクさんの残りの質問には答えませんでした。`,
},
resources: {
  building_blocks_three: {
    tip: `まずこのコマンドを試してみましょう。利用可能なコマンドの概要がつかめます。`,
    rpc_heading: `RPCコマンド`,
    rpc_paragraph_one: `RPCコマンドとは、クライアントがプログラムにリクエストを送って、クライアントとサーバー間でやり取りを行うためのインターフェースです。リクエストは、必要なパラメータとともにクライアント（またはリクエスター）から送信されます。`,
  },
building_blocks_four: {
  block_data_heading: `ブロックデータ`,
  block_data_paragraph_one: `ビットコインの本質は、その誕生から今までに送信されたすべてのトランザクションを記録した台帳（リスト）です。各トランザクションはブロック単位で整理され、各ブロックはジェネシスブロックから順に並んでいます。`,
},
building_blocks_five: {
  transaction_data_heading: `トランザクションデータ`,
  transaction_data_paragraph_one: `各トランザクションは、自身を他のトランザクションと区別し、どれだけのビットコインが送信され、どの入力と出力が使用されているかを明確にするための情報を含んでいます。`,
},
building_blocks_six: {
  block_subsidy_heading: `ブロック報酬`,
  block_subsidy_paragraph_one: `ブロック報酬とは、新しいブロックのコインベースから発行されて流通に入るビットコインの量のことです。発行可能なビットコインは約2,100万枚と限られているため、報酬が最終的にその上限に達するように、段階的に減っていく数式が必要です。以下の式は、ビットコインで採用されているその仕組みを視覚的に示しています。`,
  block_subsidy_paragraph_two: `この式は何を意味しているのでしょうか？ジェネシスブロックのコインベース報酬は50ビットコインであり、それが右辺の分数の分子で表されています。分母は報酬がどの程度減るかを示しており、この場合は「2」、つまり半減を意味します。また、ビットコインはブロック単位でしか時間を認識しないため、1つの半減期を21万ブロックと定めています。最後に、半減期ごとに2倍ずつ報酬が半減していくため、2の冪（べき）（現在の半減期番号「i」を指数とする）を使って、将来32回繰り返される半減の各段階を表現しています。`,
},
building_blocks_seven: {
  validating_heading: `ブロックの検証`,
  validating_paragraph_one: `ブロックの検証は、ネットワークの強さを支えるうえで極めて重要です。各ブロックは前のブロックのトランザクションに基づいて構築されるため、過去のいずれかのブロックが無効であると判明した場合、それ以降の長いブロックチェーン全体に疑念が生じ、大きな影響を与える可能性があります。`,
},
building_blocks_eight: {
  showtime_heading: `チェーンの検証`,
  showtime_paragraph_one: `ビットコインにおけるブロックチェーンの検証は、ネットワーク全体の整合性と安全性を維持するために極めて重要です。すべてのトランザクションは、正当なものであり、ネットワークの合意ルールに従っていることを確認するためにマイナーによって検証されなければなりません。この検証プロセスによって、二重支払いや詐欺が防がれ、中央管理者がいなくてもユーザーがシステムを信頼できるようになります。さらに、すべての検証済みトランザクションが公開台帳に記録されることで、誰でも取引履歴を監査できるという透明性も実現されています。`,
      },
    },
  },

chapter_nine: {
  title: `信じるな、検証せよ。`,
  paragraph_one: `まさにギリギリのタイミングで、あなたはヴァンダープールが無効なブロックでビットコインネットワークを混乱させようとしていたことを世界に証明しました。CMが流れる中、スタジオのテレビクルーは次のコーナーの準備を始めています。`,
  intro_one: {
    title: `イントロ`,
    nav_title: `脅し`,
    paragraph_one: `皆が喜び、皆が笑顔です。しかし、セットの中でひとりだけ不機嫌な男がいます。背が高く、身なりのいい、白髪交じりの男性。その顔を見た瞬間、あなたはすぐに気づきます。群衆が割れ、ついに彼と対面します――ヴァンダープールです！`,
    paragraph_two: `彼は拳を固く握りしめています。あなたは彼のビジネスを壊し、家族ぐるみの長年の詐欺を暴きました。彼の口から最初に出てきたのは、「おまえの残りの人生、毎日、無限に訴えてやるからな！」という脅しの言葉でした。`,
  },
  intro_two: {
    title: `イントロ`,
    nav_title: `和解の兆し`,
    paragraph_one: `ヴァンダープールが怒り狂っていると、番組プロデューサーがやってきて、世界中の視聴者があなたにビットコインとカルツォーネ（なぜか！）を寄付したい、と言っていると伝えます。デボラが、視聴者に向けてウォレットアドレスを教えてほしいと頼んできます。`,
    paragraph_two: `これにより、ヴァンダープールはさらに激怒します。寄付金の一部を自分と分け合わないなら、もっと訴訟を起こしてやると迫ってきます――まるで「無限以上、さらにその先まで訴える」つもりかのように。`,
    paragraph_three: `ヴァンダープールと寄付金を分け合うのはどう考えても理屈に合いません。そのお金は、彼のビットコインへの妨害を暴いたあなたに感謝して送りたい人々から来ているのです。あなたはふと気づきます――彼の要求はお金が欲しいというより、「負けを認めたくない」という感情に根ざしているのです。一瞬、彼に同情してしまいそうになります。彼は自らを袋小路に追い込んでしまったのです。`,
    paragraph_four: `そんなあなたの心を読んだかのように、デボラ・チャンクが割って入ります。彼女は、ヴァンダープールが希望する寄付先の慈善団体はあるかと尋ねます。驚いたことに、彼は子ども支援に取り組む非営利団体「リトル・ビッツ財団」の名を熱心に挙げます。`,
    paragraph_five: `ヴァンダープールの顔色はラディッシュのような赤からビーツのような紫へと落ち着いていきます。あなたは、ビットコインのスクリプト契約を作成し始めます。ヴァンダープールは、リトル・ビッツ財団に資金を届ける責任を負う立場です。このスクリプト契約は、あなたとヴァンダープールの間で寄付用アドレスを導き出すために使われます。信頼できない相手（カウンターパーティ）として彼を扱い、両者が合意した方法とタイミングで資金を引き出せるよう設計されています。`,
  },
opcodes_one: {
  title: `オペコード`,
  nav_title: `ビットコインスクリプト`,
  heading: `ビットコインスクリプト`,
  paragraph_one: `ビットコインスクリプトについては第6章でも少し触れましたが、そのときは深入りしませんでした。なぜなら、あなたが使用していたコインはシンプルな仕組み――1つの署名と、それを公開鍵で検証する暗黙のスクリプト――でロックされていたからです。でもここからは、もっと面白くなっていきます。`,
  paragraph_two: `ビットコインの出力を使う際に重要な要素は2つあります：スクリプトとスタックです。`,
  paragraph_three: `まずはこの2つの概念について、大まかに見ていきましょう。`,
},
opcodes_two: {
  title: `オペコード`,
  nav_title: `ビットコインスタック`,
  heading: `スタック`,
  paragraph_one: `本の山 📚 を想像してみてください。本を追加したいときは、山の一番上にしか置けません。ほかの場所には置けないのです。読みたいときに取り出せるのも、一番上にある本だけ。たとえ複数読みたくても、上から順にしかアクセスできません。コンピュータ用語で言うスタックも、データ項目を積み重ねる配列のようなもので、次の2つの操作が基本です：`,
  paragraph_two: `<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_PUSH</span> スタックの「上」に項目を追加します。`,
  paragraph_three: `<span className="text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_POP</span> スタックの「上」の項目を取り出して処理します。`,
  subheading_one: `例：`,
  stack_list_one: `これがスタック：<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[]</span>`,
  stack_list_two: `数字1をプッシュ：<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1]</span>`,
  stack_list_three: `数字2をプッシュ：<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1, 2]</span>`,
  stack_list_four: `スタックの一番上のアイテムをポップ：<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1]</span>`,
  paragraph_four: `最初にプッシュされた項目は、最後にポップされることになります。つまりスクリプトによって処理されるのも最後になるということです。だからこそ、スタックには「上下逆」あるいは「裏返し」のような感覚があり、スタックの先頭に見えているものが、スクリプト処理の最後に必要な答えである可能性が高いのです。`,
  paragraph_five: `ビットコインのトランザクション出力を使うとき、必要な要素は使うトランザクションの入力にあるウィットネスセクション（第6章参照）に提供されます。それらの要素はスクリプトが処理を始める前にスタックにプッシュされます。これらを「初期スタック」と呼ぶことにします。これらのデータこそが、スクリプトを解除してコインを使えるようにする鍵なのです！`,
},
opcodes_three: {
  title: `オペコード`,
  nav_title: `オペコード`,
  heading: `オペコード`,
  paragraph_one: `スクリプトとは、スタック上のアイテムを操作する一連の直線的なコマンド群のことです。コマンドは1つずつ順番に実行されます。スクリプトの最後に到達したとき、スタック上に**非ゼロ（ゼロ以外。false ではない）**のアイテムが**ちょうど1つだけ**残っていなければ、そのスクリプト全体は無効となり、ビットコインのトランザクションも無効になります。ビットコインスクリプト言語には「オペコード」と呼ばれる100以上のコマンドがありますが、このチャレンジではそのうちの一部だけを使います。`,
  paragraph_two: `たとえば「1 + 2 = ?」という算数の問題でビットコインをロックする例を見てみましょう。この問題の答えを知っている人だけがコインを使えるという仕組みです。`,
  paragraph_three: `スクリプトはこのようになります：`,
  paragraph_four: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1 OP_2 OP_ADD OP_EQUAL</span>`,
  paragraph_five: `このスクリプトはハッシュ化され、bech32形式でエンコードされて、誰かがコインを送るためのアドレスになります。`,
},
opcodes_four: {
  title: `オペコード`,
  nav_title: `スタックの解答`,
  heading: `スタックの解答`,
  paragraph_one: `スタックの解答はこのようになります。コインを使おうとするトランザクションには、これらすべての要素が含まれている必要があります。それらは、該当出力を使うトランザクションの入力内にあるウィットネスセクションに配置されます。順を追って見ていきましょう：`,
  table_one: {
    headings: {
      item_one: `ステップ`,
      item_two: `スタック`,
      item_three: `スクリプトの実行`,
    },
  },
subheading_one: `解説`,
stack_list_one: `初期化: 資金提供トランザクションの出力と、使用するトランザクションの入力が結びつけられます。`,
stack_list_two: `ステップ1: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1</span> が「1」をスタックにプッシュします。`,
stack_list_three: `ステップ2: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_2</span> が「2」をスタックにプッシュします。`,
stack_list_four: `ステップ3: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ADD</span> がスタックから2つのアイテムをポップし、それらを加算して合計をスタックにプッシュします。`,
stack_list_five: `ステップ4: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUAL</span> がスタックから2つのアイテムをポップし、それらを比較して、ブール値の結果をスタックにプッシュします。`,
paragraph_two: `これでスクリプトの最後に到達し、スタック上には TRUE が1つだけ残っています ――これでコインがアンロックされました！`,
paragraph_three: `もしこの例を「4」がスタックにある状態から始めたら、OP_EQUAL の評価は FALSE となり、コインを使うことはできません。このチャレンジでは、ごく限られた種類のオペコードだけを使い、それらをカテゴリごとに紹介していきます。`,
  },
opcodes_five: {
  title: `オペコード`,
  nav_title: `基本的な計算`,
  heading: `基本的な算術`,
  paragraph_one: `ビットコインスクリプトでは、簡単な数学演算を行うことができます。簡単な算数を使ってコインをロックすることも可能ですが、それだと数学ができる人なら誰でもコインを使えてしまいます！つまり、メインネット（mainnet）では絶対に試さないでください。`,
  subheading_one: `整数や任意のデータをスタックにプッシュするオペコード`,
  opconstants_list_one_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_0</span>`,
  opconstants_list_one_paragraph: `数値 0 をスタックにプッシュします。`,
  opconstants_list_two_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1</span>`,
  opconstants_list_two_paragraph: `数値 1 をスタックにプッシュします。`,
  opconstants_list_three_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_2</span>`,
  opconstants_list_three_paragraph: `数値 2 をスタックにプッシュします。`,
  opconstants_list_four_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_3</span>`,
  opconstants_list_four_paragraph: `数値 3 をスタックにプッシュします。`,
  opconstants_list_five_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_DUP</span>`,
  opconstants_list_five_paragraph: `スタックの一番上のアイテムを複製してスタックにプッシュします。`,
  opconstants_list_six_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_PUSH</span>`,
  opconstants_list_six_paragraph: `次に記述されるスクリプトの値をスタックにプッシュします。例としては SIG(alice), PUBKEY(alice), HASH256(secret), secret などがあります。小文字の文字列は現実世界のデータを表し、このインタープリタではそれらを実際の鍵・署名・ハッシュ・プレイメージとして扱います。`,
  subheading_two: `算術を行うオペコード`,
  oparithmetic_list_one_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ADD</span>`,
  oparithmetic_list_one_paragraph: `スタックから2つのアイテムをポップし、それらを加算し、合計をスタックにプッシュします。`,
  oparithmetic_list_two_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUAL</span>`,
  oparithmetic_list_two_paragraph: `スタックから2つのアイテムをポップし、それらが等しいかを比較し、その結果（ブール値）をスタックにプッシュします。`,
  oparithmetic_list_three_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUALVERIFY</span>`,
  oparithmetic_list_three_paragraph: `OP_EQUAL に似ていますが、2つのアイテムが等しくない場合はエラーを投げて、スクリプトの実行を即座に停止します。`,
  paragraph_two: `スクリプトを使ってコインを使用するには、初期スタックを準備してください。`,
},
opcodes_six: {
  title: `オペコード`,
  nav_title: `暗号による検証`,
  heading: `簡単な暗号処理`,
  paragraph_one: `これまでの章で「公開鍵ハッシュへの支払い（pay to public key hash）」について見てきました。これは、SegWitが導入されて短縮される前に、何百万ものトランザクション出力で明示的に使われていたビットコインスクリプトです。コインは公開鍵のハッシュによってロックされます。使用者は、そのハッシュに対応する公開鍵を示し、さらにその公開鍵によって検証できる署名を提示しなければなりません。`,
  subheading_one: `簡単な暗号処理を行うオペコード`,
  opcryptography_list_one_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm h-fit">OP_HASH256</span>`,
  opcryptography_list_one_paragraph: `スタックから1つのアイテムをポップし、それに対してダブルSHA256を計算し、そのダイジェストをスタックにプッシュします。この演習では、文字列でこの操作を表現します。例：スクリプト OP_1 OP_HASH256 によって、スタックは [HASH256(1)] になります。`,
  opcryptography_list_two_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm h-fit">OP_CHECKSIG</span>`,
  opcryptography_list_two_paragraph: `スタックから2つのアイテムをポップします。1つ目は PUBKEY(...) の形式の公開鍵でなければなりません。2つ目は SIG(...) の形式の署名である必要があります。両方のカッコ内の文字列が一致していれば、有効なECDSA署名とみなして TRUE をスタックにプッシュし、そうでなければ FALSE をプッシュします。`,
  paragraph_two: `スクリプトを使ってコインを使用するには、初期スタックを準備してください。`,
}
opcodes_seven: {
  title: `オペコード`,
  nav_title: `マルチシグ`,
  heading: `マルチシグ`,
  paragraph_one: `マルチシグ（マルチシグネチャ）スキームでは、公開鍵のリストと、それらのうち何個の署名があれば有効とみなすかという数値を指定します。これは「n個の公開鍵のうちm個の署名が必要」という意味で「m-of-n」と表現されます。公開鍵とm、nの値は通常ロックスクリプトに含まれ、使用者は必要な数の署名だけを提示すればよいのです。`,
  paragraph_two: `ホロキャットがサトシ・ナカモトからの録音メッセージを持ってきた！`,
  paragraph_three: `こんにちは。私が <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> を実装したとき、うっかりバグを書いてしまいました。このオペコードは、まったく使われない余計な要素をスタックから1つポップしてしまうんです。それで、ええと…やっちゃった。ごめんなさい。このコードはコンセンサスに関わる重要な部分なので、ビットコインの過去・現在・未来のすべての <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> 操作では、「ダミー」要素を含めることが強制されます。これを忘れるとマルチシグのコインは使えなくなりますよ！`,
},
opcodes_eight: {
  title: `オペコード`,
  nav_title: `複数の鍵で署名`,
  heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-1">OP_CHECKMULTISIG</span>`,
  subheading_one: `m-of-n マルチシグネチャを処理するアルゴリズムは次の通りです。`,
  multisig_list_one: `スタックから整数を1つポップします。これが <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">n</span> の値です。`,
  multisig_list_two: `<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">n</span> 個のアイテムをスタックからポップします。これらはすべて <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">PUBKEY(...)</span> 形式の公開鍵であると想定されます。`,
  multisig_list_three: `スタックから整数を1つポップします。これが <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">m</span> の値です。`,
  multisig_list_four: `<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">m</span> 個のアイテムをスタックからポップします。これらはすべて <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">SIG(...)</span> 形式の署名であると想定されます。`,
  multisig_list_five: `まったく理由もなく、スタックからさらに1つの要素をポップします（バグによる仕様です）。`,
  multisig_list_six: `各公開鍵を順番に処理します：スタックの一番上の署名と照合し、有効ならその公開鍵と署名を両方削除し、次の公開鍵へ進みます。無効であれば、公開鍵だけを削除し、同じ署名を使って次の公開鍵と比較します。`,
  multisig_list_seven: `すべての公開鍵の検証が終わったあとに、署名がスタック上に残っていた場合は、失敗となります。`,
  multisig_list_eight: `すべての署名が使い切られた時点で成功と判断され、公開鍵がまだ残っていても処理は完了します。`,
  paragraph_one: `なお、m ≤ n である必要があります。公開鍵の数より署名の数が多くなることはありません。また、署名と公開鍵は、使われるかどうかにかかわらず、**順番が一致していなければなりません**。`,
  paragraph_two: `スクリプトを使ってコインを使用するには、初期スタックを準備してください。`,
},
opcodes_nine: {
  title: `オペコード`,
  nav_title: `ロック解除まで待機`,
  heading: `タイムロック`,
  paragraph_one: `前世紀に「BIP 65」という文書でビットコインに新しいオペコードを追加する提案がされ、それが最終的にコンセンサスルールに加わりました。このオペコードは、トランザクションの nLocktime がスクリプトで指定された値以上であることを要求するために使われます。ビットコインのコンセンサスルールでは、トランザクションの nLocktime よりブロックの高さが低い場合に限って、そのトランザクションをブロックに含めることが許されています。つまりこのオペコードは、ブロックチェーンが将来ある高さに到達するまで、そのトランザクションを使用不可にするのです。このオペコードはソフトフォークで追加されたため、実際にはスタックから何もポップしません。そのため、ほとんどの場合は <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_DROP</span> も一緒に使う必要があります。もしこのオペコードが「このトランザクションをブロックに含めるには早すぎる」と判断すると、スクリプトの実行は即座にエラーで停止します。`,
  subheading_one: `タイムロックに関係するオペコード`,
  optimelock_list_one_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_DROP</span>`,
  optimelock_list_one_paragraph: `スタックから1つのアイテムをポップし、それを無視します。`,
  optimelock_list_two_heading: `<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKLOCKTIMEVERIFY</span>`,
  optimelock_list_two_paragraph: `スタックの一番上のアイテムを読み取り（ポップしません）、それをブロックの高さとして解釈します。この値が次のブロックの高さ以上でない場合、この操作は無効となります。`,
  paragraph_two: `スクリプトを使ってコインを使用するには、初期スタックを準備してください。`,
},
opcodes_ten: {
  title: `オペコード`,
  nav_title: `ロジックを組む`,
  heading: `条件分岐`,
  paragraph_one: `他の優れたプログラミング言語と同じように、ビットコインスクリプトにもロジックの分岐があります！どの分岐を通るかは、使用者がどの認証条件を満たすかによって選ばれます。`,
  paragraph_two: `<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> はロジック分岐のためのオペコードです。`,
  paragraph_three: `<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> はスタックから1つの値をポップし、それをブール値として評価します。TRUE なら <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> まで実行し、その後 <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> にジャンプします。FALSE なら <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> までジャンプし、そこから <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> までを実行します。分岐は入れ子にすることもできますが、すべての <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> に対応する <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> が必要です。そうでない場合、インタプリタがエラーを出し、スクリプトの実行は失敗します。`,
  paragraph_four: `スクリプトを使ってコインを使用するには、初期スタックを準備してください。`,
},
proposal_one: {
  title: `上級編`,
  nav_title: `物語に戻る`,
  heading: `物語に戻ろう！`,
  paragraph_one: `よくできました！基本的なトランザクションスクリプトを構築するために必要なオペコードのほとんどを学びました。さあ、実際に試してみましょう。`,
  paragraph_two: `各契約提案について、ビットコインスクリプトと有効な支出スタックを作成してください。`,
},
proposal_two: {
  title: `2-of-2 マルチシグ`,
  nav_title: `協力して署名`,
  heading: `2-of-2 マルチシグ`,
  paragraph_one: `ヴァンダープールが最初に提案したのは、2-of-2 マルチシグです。すべての寄付は、あなたと リトル・ビッツ財団で 50/50 に分配されます。この資金は両者が共同で管理し、寄付アドレスからのすべての支出トランザクションに両者の署名が必要になります。つまり、寄付アドレスから出金するには、2人の合意が必要です。`,
  paragraph_two: `ヴァンダープールが彼の公開鍵をあなたに渡してきました：PUBKEY(vanderpoole)。あなたの公開鍵は PUBKEY(me) です。`,
  paragraph_three: `このスクリプトを使ってコインを使用するために、初期スタックを用意してください。`,
  next_step_message: `いい感じです！次はあなた自身の署名で試してみましょう。`,
},
proposal_three: {
  title: `条件付きタイムロックトランザクション`,
  nav_title: `彼を待たせよう`,
  heading: `条件付きタイムロックトランザクション`,
  paragraph_one: `ちょっと待って、それは納得できない——彼とこれからも付き合い続けるのはごめんだ！新しい提案はこうです：あなたがテレビに出演している次の2時間は、すべての寄付をあなたが受け取ります。それ以降に届いた寄付は、リトル・ビッツ財団が受け取ります。スタジオの壁にあるビットコインブロックを見て、約2時間後にブロック高 6930300 に到達するだろうと合意しました。`,
  paragraph_two: `ヴァンダープールの公開鍵は PUBKEY(vanderpoole)、あなたの公開鍵は PUBKEY(me) です。`,
  paragraph_three: `このスクリプトを使ってコインを使用するために、初期スタックを用意してください。`,
  next_step_message: `良さそうですね！次はあなた自身の署名で試してみましょう。`,
},
proposal_four: {
  title: `秘密の値でロックされたトランザクション`,
  nav_title: `オラクルと連携`,
  heading: `秘密のプレイメージでロックされたトランザクション`,
  paragraph_one: `ヴァンダープールがまた考えを変えました。先ほどの提案は不確定要素が多すぎて気に入らなかったようです。今度は、寄付総額のうち最初の1.0 BTCはリトル・ビッツ財団が受け取り、それ以降の寄付をあなたが使えるようにしたいとのこと。`,
  paragraph_two: `ビットコインスクリプトでは、複数のUTXOをまたいで合計残高を確認することはできません。そこで、中立で信頼できる第三者オラクルとして、デボラ・チャンクが登場します！彼女はブロックチェーン上の寄付額を監視し、合計が1.0 BTCに達したら、テレビ中継であなたがスクリプトにあらかじめ仕込んだハッシュのプレイメージ（元の値）を発表する予定です。`,
  paragraph_three: {
    a: `彼女は秘密裏にランダムなナンスを生成し、そのハッシュ値（ダイジェスト）をあなたに渡します：<span className="text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">HASH256(FD3771E8)</span>。この秘密が公開された時点で、あなたは受け取ったコインを使えるようになります。`,
    b: `ただし、それより1秒でも早く使おうとしてはいけません！`,
  },
  paragraph_four: `ヴァンダープールの公開鍵は PUBKEY(vanderpoole)、あなたの公開鍵は PUBKEY(me) です。`,
  paragraph_five: `このスクリプトを使ってコインを使用するために、初期スタックを用意してください。`,
  tooltip_one: {
    question: `サトシ（satoshi）って何？`,
    link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520a%2520satoshi%253F`,
    highlighted: `サトシ`,
  },
  next_step_message: `プレイメージと署名を正しく使えたか確認してみましょう。`,
},
outro_one: {
  title: `アウトロ`,
  nav_title: `チャプター完了`,
  heading: `よくやった！`,
  paragraph_one: `寄付はあなたとリトル・ビッツ財団に無事分配され、多くの視聴者がヴァンダープールの行動を明るみにしたあなたに感謝しています。ビットコインの分散型ネットワークは乗っ取るのが困難ですが、彼のような人間が試みるのを完全に止めることはできません。それでも、これまでの努力が実を結び、ついに真実が明らかになったことに、あなたはほっとしています。`,
},

resources: {
  opcodes_five: {
    arithmetic_heading: `算術オペコード`,
    arithmetic_paragraph: `ビットコインスクリプトでは、数学のようにいくつかの入力に対して算術演算を行うことができます。実際のビットコインスクリプトでは、入力は符号付き32ビット整数に制限されていますが、出力はオーバーフローする可能性があります。`,
    spoiler: `初期スタックに合計が3になるような2つの整数を入れてみましょう。`,
  },
  opcodes_six: {
    cryptography_heading: `暗号オペコード`,
    cryptography_paragraph: `これらのオペコードは、UTXOの所有者による署名でのみ出力が使用可能となることを保証するため、日常のトランザクションにおいて重要です。なお、オペコードに公式なカテゴリ分けはなく、16進表現に基づいて整理されています。`,
    spoiler: `スクリプトはハッシュ化された公開鍵に対して署名をチェックします。まず署名キーを置き、次に公開鍵を置いてください。`,
  },
  opcodes_eight: {
    multisig_heading: `マルチシグ用オペコード`,
    multisig_paragraph: `<span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> には有名なバグがあり、スタックの最上部に実際のマルチシグとは無関係な余分な値を1つ置く必要があります。`,
    spoiler: `これは2つの署名が必要なマルチシグスクリプトで、スタックの最初の値は CHECKMULTISIG の仕様上必要なダミー値です。`,
  },
  opcodes_nine: {
    timelock_heading: `タイムロック用オペコード`,
    timelock_paragraph: `ビットコインスクリプトは現在のブロック高を読み取ることができるため、将来のブロック高に基づいてトランザクションをロックできます。<span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKLOCKTIMEVERIFY</span> の正確な仕様は`,
    timelock_link: `<Link target="_blank" href="https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki" className="underline">こちら</Link>をご覧ください。`,
    spoiler: `このスクリプトは特定のブロック高まで送金をロックし、その後スタック内の署名を検証します。`,
  },
  opcodes_ten: {
    conditionals_heading: `条件分岐ロジック`,
    conditionals_paragraph: `条件付きオペコードを使えば、基本的なプログラミングロジックの分岐を実現できます。これによりビットコインスクリプトの可能性が広がりますが、従来のプログラミング言語に比べると依然として制限があります。`,
    spoiler: `初期スタックの最初の2つの値の合計が false なので、スクリプトは OP_ELSE の分岐に進みます。`,
  },
  proposal_two: {
    making_script_heading: `スクリプト作成`,
    making_script_paragraph: `スクリプトは、スタック上に単一の truthy 値（真となる値）が残って初めて検証されます。バージョンによっては任意の truthy 値でも良いものもありますが、このスクリプトエディターでは 1 または true のみが許可されています。`,
    tip: `<span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> のバグによってスタックに余分な値が必要になる点を忘れずに！`,
    spoiler: `スクリプトのヒント：このマルチシグ構成では両方の参加者の署名が必要です。スクリプトは2つの署名を要求し、両方の公開鍵を含みます。
スタックのヒント：スクリプトを満たすには、2つの署名を提供する必要があります。スタック上の0は、CHECKMULTISIG の仕様に伴う特別な動作に対応するためのものです。`,
  },
  proposal_three: {
    tip: `条件分岐とタイムロックを組み合わせて、ヴァンダープールの署名とあなたの署名を分離してみましょう。`,
    spoiler: `スクリプトのヒント：このスクリプトは2つの条件で送金を許可します：ブロック高6930300より前か後かです。ブロック前はヴァンダープールが送金でき、ブロック後はあなたが送金できます。

スタックのヒント：指定されたブロックの前に送金するには、ヴァンダープールの署名を使います。ブロック後であれば、あなたの署名と 0 を提供します。これはスクリプトがタイムロックの検証を終えた後の状態を示します。`,
  },
  proposal_four: {
    tip: `プレイメージはいつ公開されるか分からないため、タイムロックは必要ありません。`,
    spoiler: `スクリプトのヒント：このスクリプトは2つの条件で送金を許可します：秘密が公開される前と後。公開前はヴァンダープールが送金でき、公開後は両者が送金できます。

スタックのヒント：秘密が公開される前に送金するには、ヴァンダープールの署名を使います。公開後に送金するには、あなたの署名、秘密のハッシュ、そしてスクリプトが検証を終えたことを示す0を提供します。`,
      },
    },
  },

chapter_ten: {
  title: `100億のつながり`,
  paragraph_one: `テレビスタジオの「ON AIR」ランプが消える。舞台スタッフたちは3Dカメラの電源を切り、長く波乱に満ちた一日を終えて引き上げていく。ミカ3000がそこであなたを待っている。`,
    intro_one: {
    title: `お祝い`,
    nav_title: `お祝い`,
    paragraph_one: `—ミカ3000：「やりましたね！ほんとに全部やり遂げたじゃないですか！ちょっと何か飲みに行って、お祝いしませんか？」`,
    paragraph_two: `近くにある「The Public Key Pub」というバーへ歩いていく。バーテンダーのラズロは名札をつけたフレンドリーな男で、2人を歓迎してくれる。`,
    paragraph_three: `—ミカ3000：「なぜだか分からないけど…カルツォーネが無性に食べたくなっちゃいました。」`,
    paragraph_four: `—ラズロ：「カルツォーネは置いてないんですが、うちのピザは曾祖父の代からの自信作なんですよ。中には“1万ビットコインの価値がある”なんて言う人もいます。」`,
    paragraph_five: {
      a: `—ミカ3000：「1万ビットコイン？ ってことは…ラズロさんって、あの`,
      b: `のご子孫だったり、します？」`,
    },
    paragraph_six: `—ラズロ：「はい、そのラズロです。」`,
    tooltip_one: {
      question: `ラズロとピザの日にはどんな意味があるの？`,
      link: `https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520the%2520significance%2520of%2520Laszlo%2520and%2520pizza%2520day%253F`,
      highlighted: `伝説のラズロ`,
    },
  },
  intro_two: {
    title: `ドリンクの注文`,
    nav_title: `ドリンクの注文`,
    paragraph_one: `—ミカ3000：「すごいですねぇ。1万ビットコインじゃなければ、そのピザひとつと、ライトニング・レモネードを2つお願いします。カルツォーネがないのは残念ですけど。」`,
    paragraph_two: `ミカ3000とラズロは、太陽光で動く「ePhone Infinity」を取り出して、ボタンをタップし始める。`,
    paragraph_three: `—ミカ3000：「あらら…。さっきのあなたの派手な行動のせいで、マイナー手数料が跳ね上がっちゃいましたよ。いまビットコインネットワークは大混雑、トランザクション手数料も大変なことになってます！　これはオフチェーンで支払うしかなさそうですね。」`,
  },
  intro_three: {
    title: `オフチェーン？`,
    nav_title: `オフチェーン？`,
    paragraph_one: `「サトシ」から最初に連絡が来て以来、あなたはオンチェーン取引だけを使ってきた。マイニング報酬を受け取ったのも、ミカ3000に送金したのもそうだ。しかし、オンチェーンの取引は日常的に何度も使うには向いていない。ブロックスペースには限りがあり、手数料も変動するためだ。`,
    paragraph_two: `それでは、どうやって人々はビットコインを毎日のように使えるようにしているのだろう？　答えはオフチェーン決済。あなたもきっと何度も目にしてきたはずだ。オレンジ色のタクシーが乗客を降ろして走り去る、ハラール料理の屋台で夕食を買う人、ホロドッグとデジミルクを持って店を出る子ども……。お金の使い道は、ほとんど無限にある。`,
    paragraph_three: `ビットコイン単体ではこれほどのアクティビティを処理できなくても、オフチェーン決済を使えば可能になる。`,
    paragraph_four: `—あなた：「大丈夫ですよ、ミカ3000。僕が対応します。オフチェーン決済でライトニング・レモネードを買ってみせますから。」`,
  },
opening_a_channel_one: {
  title: `初期資金`,
  nav_title: `初期資金`,
  heading_one: `初期資金`,
  paragraph_one: `ブロックチェーン上で確認済みのUTXOとして、あなたは101,000サトシを保有しています。オフチェーン決済って、けっこう簡単そうに見えますよね？`,
},
opening_a_channel_two: {
  title: `オフチェーン取引`,
  nav_title: `オフチェーン取引`,
  heading_one: `オフチェーン取引`,
  paragraph_one: `有効なビットコインのトランザクションを作成しましょう。ただし、それをネットワークにブロードキャストする代わりに、ラズロに直接渡します。その見返りとして、彼は「ライトニング・レモネード」を提供してくれるはずです。なぜなら、ラズロはいつでもそのトランザクションをブロードキャストでき、それがブロックに取り込まれれば、ビットコインは彼のものになるからです。`,
  paragraph_two: `今は西暦2140年！ライトニング・レモネードは0.00001000 BTCです。`,
  heading_two: `手順`,
  off_chain_list_one: `出力金額を2つ入力しましょう：1つ目の出力にはラズロに1000サトシ、2つ目の出力には自分へのおつりを入力します。`,
  off_chain_list_two: `ラズロがビットコインを受け取るには、このトランザクションをネットワークにブロードキャストする必要があり、その際にはマイナー手数料がかかります。1000サトシを手数料として差し引いて、おつりの金額を調整しましょう。`,
  off_chain_list_three: `2つの出力スクリプトを書きましょう`,
  off_chain_list_four: `入力を署名するには、<span className="rounded-sm px-1.5 py-1 h-[28px] bg-[#0000004D] m-0.5 text-base">Sign</span> をクリック`,
　// off_chain_list_four: `Send it to Laszlo by clicking "send to bob"`,
  heading_three: `ヒント`,
  hint_one: `ラズロは、<span className="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(LASZLO)</span> を使って出力0を使用します`,
  hint_two: `あなたは、<span className="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU)</span> を使って出力1を使用します`,
  hint_three: `これらの署名は出力スクリプトの一部ではありません`,
},
opening_a_channel_three: {
  title: `オフチェーン決済の信頼の問題`,
  nav_title: `信頼の問題`,
  paragraph_one: `—ラズロ：「ちょっと待って、それはおかしくないか？　君がそのトランザクションをブロードキャストしなければ、101,000サトシはまだ君のものだ。君はレモネードを飲んで、そのお金を別のことに使えてしまう。僕には何も残らないよ！」`,
  paragraph_two: `「オフチェーンで取引するっていうなら、君が僕に払おうとしているそのお金を、君自身がオンチェーンで動かせないっていう保証が必要だ。」`,
},
opening_a_channel_four: {
  title: `マルチシグ`,
  nav_title: `マルチシグ`,
  heading_one: `マルチシグ`,
  paragraph_one: `ラズロに支払う前に、まずは資金を2-of-2マルチシグに入れて、ブロックチェーン上で確認させましょう。その上で、1つのオンチェーントランザクションをもっと有効に使う方法を考えていきます。つまり、より少ない回数でより多くのことを実現するのです。`,
  heading_two: `手順`,
  multisig_one: `出力額と出力スクリプトを入力しましょう`,
  multisig_two: `<span className="rounded-sm px-1.5 py-1 h-[28px] bg-[#0000004D] m-0.5 text-base">Sign and Broadcast</span> をクリックして入力に署名し、ブロードキャストしましょう`,
  heading_three: `ヒント`,
  hint_one_a: `あなたとラズロは、今後一緒に出力0を使用するつもりです。<br/>`,
  hint_one_b: `<span className="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(LASZLO) SIG(YOU)</span>`,
  hint_two: `マイナー手数料を差し引くのを忘れずに`,
},
opening_a_channel_five: {
  title: `マルチシグでの払い戻し保護`,
  nav_title: `払い戻し保護`,
  paragraph_one: `—ラズロ：「OK、ありがとう。これは良いスタートだね。でももし、僕がこのまま席を立って、二度と君に会わなかったらどうする？　僕はこのトランザクションをブロードキャストできるし、君の10万サトシは2つの鍵が必要なマルチシグに閉じ込められて、君は永遠に取り戻せなくなるかもしれないよ。」`,
  paragraph_two: `「自分のためにも、この署名をする前に“払い戻し用トランザクション”を作っておいた方がいい。そうすれば、資金を回収できるって分かるからね。」`,
},
updating_the_state_one: {
  title: `払い戻しトランザクション`,
  nav_title: `払い戻し`,
  heading_one: `払い戻しトランザクション`,
  paragraph_one: `あなたの ePhone Infinity に新しいタブ <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">Refund</span> が現れます。同じ画面に新しいTXテンプレートがもう一つ開き、<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">Multisig</span> 出力から今回のTX入力へ矢印がつながっています。`,
  heading_two: `手順`,
  refund_list_one: `出力額と出力スクリプトを入力しましょう`,
  refund_list_two: `<span class="rounded-sm px-1.5 py-1 h-[28px] bg-[#0000004D] m-0.5 text-base">Send to Laszlo</span> をクリックしてラズロに送り、彼が署名してくれるか確認します`,
  refund_list_three: `まだ自分では署名しないでください！ まずはラズロの返答を待ちましょう`,
  heading_three: `ヒント`,
  hint_one: `出力0は、あなたが <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU)</span> で使用します`,
},
updating_the_state_two: {
  title: `支払いを安全に`,
  nav_title: `支払いの安全`,
  paragraph_one: `—ラズロ：「よし、いい感じだね。これに署名して君に送り返すから、そのあとで2-of-2マルチシグの資金トランザクションに君が署名してくれればOKだ。」`,
  paragraph_two: `「…いや、待てよ。僕がこれに署名したら話は振り出しに戻らないか？ 君はレモネードを受け取った後でもこの払い戻しTXをブロードキャストできるし、その場合僕はお金を受け取れない。」`,
  paragraph_three: `「だから署名する前に、この払い戻しトランザクションを“無効化”できる保証が欲しいんだ。」`,
  paragraph_four: `「つまり、実際に支払いが行われたら君がこの払い戻しTXを二度と使えないようにしたい。もし無効化後に君がブロードキャストしたら、<span class="italic">10万サトシ全部</span>は僕のものにできる、そんな仕組みが必要だよ！」`,
},
updating_the_state_three: {
  title: `取り消し（リボーク）`,
  nav_title: `リボーク`,
  heading_one: `取り消しの仕組み`,
  paragraph_one: `自分への10万サトシの出力に追加条件を付ければ、ラズロがそれを取り消せるようにできます。ロジック分岐を加え、ラズロが「自分の鍵」と「あなたが生成する新しい秘密鍵」の両方を持っている場合のみ、この出力を使えるようにします。取り消しを行うときは、その新しい秘密鍵をラズロに渡せばOK。少し変わった手法ですが、10万サトシを担保にし、取り消し後にあなたがTXをブロードキャストしようとすると、ラズロが資金を丸ごとスイープできる仕組みです。`,
  paragraph_two: `あなたは新しい鍵ペアを生成します：秘密鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_1</span> と公開鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">PUBKEY(REVOCATION_YOU_1)</span>。支払いチャネルのステートを更新するたびに、このように新しい鍵ペアを生成します。`,
  heading_two: `手順`,
  revocation_list_one: `スクリプトに IF 条件を追加し、「ラズロが自身の鍵と取り消し鍵を両方持っている場合だけ」出力を使えるようにしましょう（取り消しを行うまでは秘密鍵はあなたが保持します！）`,
  revocation_list_two: `<span class="rounded-sm px-1.5 py-1 h-[28px] bg-[#0000004D] m-0.5 text-base">Send to Laszlo</span> をクリックしてラズロに送り、署名してもらいましょう`,
  revocation_list_three: `まだ自分では署名しないでください！`,
  heading_three: `ヒント`,
  paragraph_three: `出力0は次のいずれかで使用されます：`,
  hint_one: `あなたが資金を引き取る場合の初期スタック：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU) 1</span>`,
  hint_two: `ラズロが資金を引き取る場合の初期スタック：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_YOU_1) SIG(LASZLO) 0</span>`,
},
updating_the_state_four: {
  title: `取り消しレース`,
  nav_title: `取り消しレース`,
  paragraph_one: `—ラズロ：「うーむ、これで少しはマシになったけど……よく考えたら、たとえ僕がリボーク鍵（取り消しキー）を持っていても、この出力を使うのは君と僕の“早い者勝ち”になるんじゃない？」`,
  paragraph_two: `「君がズルをしたとしても、それに気づいてからビットコインをリボーク鍵でスイープするには、僕にある程度の先行猶予が必要だよ。そうしないと、君に払い戻しを全部持っていかれてしまうかもしれない。」`,
},
updating_the_state_five: {
  title: `タイムロック`,
  nav_title: `タイムロック`,
  heading_one: `タイムロック`,
  time_lock_list_one: `君が出力を使えるまで700ブロックの遅延を追加しましょう`,
  time_lock_list_two: `<span class="rounded-sm px-1.5 py-1 h-[28px] bg-[#0000004D] m-0.5 text-base">Send to Laszlo</span> をクリックしてラズロに送り、署名してもらいましょう`,
  time_lock_list_three: `まだ自分では署名しないでください！`,
  heading_two: `ヒント`,
  paragraph_one: `出力0は次のいずれかで使用されます：`,
  hint_one: `700ブロック後にあなたが資金を引き取る場合の初期スタック：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU) 1</span>`,
  hint_two: `ラズロが資金を引き取る場合の初期スタック：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_YOU_1) SIG(LASZLO) 0</span>`,
},
updating_the_state_six: {
  title: `ラズロとのチャネルが開設されました`,
  nav_title: `チャネル開設`,
  paragraph_one: `今回は、あなたがラズロにトランザクションを渡すと、彼はにっこり笑って拍手をしてくれました！　彼は払い戻し（子）トランザクションに署名し、あなたは親トランザクション（2-of-2マルチシグに資金を預け入れる）に署名してブロードキャストできるようになりました。これで、支払いチャネルが開設されました！`,
},
making_a_payment_one: {
  title: `支払いを行う`,
  nav_title: `支払い`,
  heading_one: `支払いを行う`,
  paragraph_one: `ここまでのまとめ：`,
  list_one: `あなたはラズロとの間で2-of-2マルチシグ出力に10万サトシを送りました。`,
  list_two: `その出力を使う払い戻しトランザクションを、オフラインで保持しています。`,
  list_three: `その払い戻しトランザクションでは、資金の使い道として2つの選択肢が指定されています：`,
  list_three_sub_one: `手数料を引いた99,000サトシを700ブロック後にあなたが全額取り戻す、または`,
  list_three_sub_two: `ラズロがあなたから <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_1</span> を受け取れば、彼が全額を得る`,
  list_four: `ラズロはすでにこの払い戻しトランザクションに署名しており、あなたはいつでも署名してブロードキャストできます。`,
  list_five: `ラズロがこの払い戻し（子）トランザクションに署名した時点で、あなたは親トランザクション（2-of-2マルチシグに資金を送る）に署名してブロードキャストする準備が整いました。`,
  paragraph_two: `マルチシグ出力に資金を提供したトランザクションは <span class="font-bold">ファンディングトランザクション</span> と呼ばれます。これがブロックチェーンで確認されると、支払いチャネルが<span class="font-bold">開設</span>されます。`,
  paragraph_three: `ファンディングトランザクションの出力を使う払い戻しトランザクションは <span class="font-bold">コミットメントトランザクション</span> と呼ばれます。これがブロックチェーンで確認されると、チャネルは<span class="font-bold">閉じられます</span>。最初のコミットメントトランザクションは払い戻しのみを含んでおり、まだラズロに支払いをしていない状態です。`,
  paragraph_four: `チャネルが開いている間は、あなたとラズロはオフラインで新しいコミットメントトランザクションを交渉し、古いものを取り消すことで、相互に支払いを行うことができます。ドリンクを買うたびに、あなたの「払い戻し額」は減少し、ラズロの取り分（マルチシグにロックされた10万サトシのうちの）が増えていきます。`,
},
making_a_payment_two: {
  title: `ライトニング・レモネードを買おう！`,
  nav_title: `レモネードを購入`,
  heading_one: `ライトニング・レモネードを買おう！`,
  paragraph_one: `いよいよオフチェーンでラズロにビットコインを送るときが来ました。今回の更新されたコミットメントトランザクションに、彼への1,000サトシの出力を「追加するだけ」です。また、古いコミットメントトランザクション（ラズロに何も割り当てていない）を二度とブロードキャストしないという約束も必要です。その保証として、今の古いコミットメントトランザクションのリボーク鍵をラズロに渡します（このあと実行）。`,
  paragraph_two: `今回の新しい状態用に、あなたは <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_2</span> という別のリボーク鍵を生成します。このプロセスを繰り返して2杯目を買いたい場合は、このトランザクションを取り消して、次のコミットメントトランザクションでラズロに2杯目の代金を支払うことになります。まるでパーティーですね！`,
  heading_two: `手順`,
  list_one: `自分の出力から1,000サトシを差し引く`,
  list_two: `2つ目の出力に1,000サトシを追加し、ラズロ用のスクリプトを入力する`,
  list_three: `"Send to Laszlo" をクリックしてラズロに送り、署名してもらう`,
  list_four: `まだ自分では署名しないでください！`,
  heading_three: `ヒント`,
  paragraph_three: `出力0は次のいずれかで使用されます：`,
  hint_one: `「Refund」タブは今や「Initial Commitment（初期コミットメント）」と呼ばれ、前の状態で作成したスクリプトが確認できます。`,
  hint_two: `あなたが700ブロック後に資金を引き出す場合：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU) 1</span>`,
  hint_three: `ラズロが資金を引き出す場合：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_YOU_2) SIG(LASZLO) 0</span>`,
  paragraph_four: `出力1はラズロが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(LASZLO)</span>`,
},
making_a_payment_three: {
  title: `ラズロのブロックチェーンジレンマ`,
  nav_title: `ラズロのジレンマ`,
  paragraph_one: `ラズロはそのトランザクションをじっと見つめ、バーカウンターの奥からグラスを取り出しますが、まだレモネードを注いでいません。`,
  paragraph_two: `—ラズロ：「待って。君がこのトランザクションに署名しなければ、僕は何も持っていないことになる。君はこのレモネードを持ち逃げするかもしれないし、僕はブロックチェーン上で何も確認できない。君が先に署名してから送ってくれた方が、お互いコピーが残るし安心じゃない？」`,
},
making_a_payment_four: {
  title: `ホロキャットのトラストレスな警告`,
  nav_title: `ホロキャットの警告`,
  paragraph_one: `そのとき、ホロキャットがテーブルの上に現れ、後ろ足で立ち、前足を伸ばして「ニャー」と鳴きました。`,
  paragraph_two: `—ホロキャット：「ちょっと待つニャ！　そのトランザクションにラズロへの署名を渡しちゃダメにゃ！　次に支払いをするときに、キミはリボーク鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_2</span> を彼に渡すことになるニャン。そうしたら、彼は10万サトシ全部を盗むために必要なものを全部持つことになっちゃうニャ！」`,
  paragraph_three: `状況はちょっと複雑になってきました。ラズロがライトニング・レモネードを渡す前に、きちんと支払いを受けられる保証が欲しいのは当然です。でも、あなたの署名済みトランザクションを持たせてしまうと、ラズロはあなたの全資金にアクセスできてしまいます。ラズロは素晴らしい人物で、彼のバーは街で一番ですが、できれば信頼に頼らずに済む方が安心です。`,
},
making_a_payment_five: {
  title: `非対称性`,
  nav_title: `非対称性`,
  heading_one: `非対称性`,
  paragraph_one: `ラズロには最初のトランザクションに署名してもらいたいけど、自分の署名は渡したくない——そんなジレンマがあります。そこで、彼に署名済みの別のトランザクションを渡す必要があります。ただし、それは彼が不正に全額を使えないようになっていなければいけません。`,
  paragraph_two: `ラズロに彼専用のコミットメントトランザクションを持たせるなら、そのトランザクションも「取り消し可能」にしたいですよね？　そう、ラズロのコミットメントトランザクションは、あなたのものの鏡像のようになります。取り消し用のタイムロックスクリプトには、ラズロのリボーク鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">PUBKEY(REVOCATION_LASZLO_1)</span> を使用し、払い戻し出力の大部分は、何の問題もなくあなたに直接送られるようにします。`,
  heading_two: `手順`,
  list_one: `ラズロ用のコミットメントトランザクションに、金額と出力スクリプトを入力しましょう`,
  list_two: `それに署名してラズロに送りましょう。すると彼は、あなたのコミットメントトランザクションに署名して返してくれます`,
  heading_three: `ヒント`,
  hint_one: `「Commitment_you」タブに切り替えると、自分用のコミットメントトランザクションのスクリプトを確認できます。`,
  paragraph_three: `出力0は次のいずれかで使用されます：`,
  hint_two: `700ブロック後にラズロが引き出す場合：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(LASZLO) 1</span>`,
  hint_three: `あなたが使用する場合：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_LASZLO_1) SIG(YOU) 0</span>`,
  paragraph_four: `出力1はあなたが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU)</span>`,
},
making_a_payment_six: {
  title: `支払いの完了`,
  nav_title: `支払いの完了`,
  heading_one: `支払いの完了`,
  paragraph_one: `ここでもう一度、整理してみましょう。`,
  list_one: `2-of-2出力がブロックチェーン上で確認されました`,
  paragraph_two: `2-of-2マルチシグにロックされた10万サトシ出力を使う、複数のオフチェーントランザクションが存在しています：`,
  paragraph_three: `最終的にあなたが保持するトランザクションは以下のとおりです：`,
  paragraph_four: `コミットメント1（あなた）`,
  commitment_one_you: {
    list_one: `<span class="font-semibold">入力0：</span>ラズロが署名済み`,
    list_two: `<span class="font-semibold">出力0：</span>700ブロック後にあなたが99,000サトシを受け取る、またはラズロが <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_1</span> を使って受け取る`,
    list_three: `<span class="font-semibold">マイナー手数料：</span>1,000サトシ`,
  },
commitment_two_you: {
  list_one: `<span class="font-semibold">入力0：</span>ラズロが署名済み`,
  list_two: `<span class="font-semibold">出力0：</span>700ブロック後にあなたが98,000サトシを受け取る、またはラズロが <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_2</span> を使って受け取る`,
  list_three: `<span class="font-semibold">出力1：</span>ラズロに1,000サトシ`,
  list_four: `<span class="font-semibold">マイナー手数料：</span>1,000サトシ`,
},
paragraph_five: `コミットメント2（あなた）`,
paragraph_six: `ラズロが保持するトランザクション：`,
paragraph_seven: `コミットメント2（ラズロ）`,
commitment_two_laszlo: {
  list_one: `<span class="font-semibold">入力0：</span>あなたが署名済み`,
  list_two: `<span class="font-semibold">出力0：</span>700ブロック後にラズロが1,000サトシを受け取る、またはあなたが <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_LASZLO_1</span> を使って受け取る`,
  list_three: `<span class="font-semibold">出力1：</span>あなたに98,000サトシ`,
  list_four: `<span class="font-semibold">マイナー手数料：</span>1,000サトシ`,
},
paragraph_eight: `これら3つのトランザクションはすべて署名済みで有効ですが、ラズロはまだライトニング・レモネードを渡していません。なぜでしょう？　あとひとつ、やるべきことが残っています。前のリボーク鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_1</span> をラズロに送りましょう！`,
success_bar: `REVOCATION_YOU_1 をラズロに送る`,
},
making_a_payment_seven: {
  title: `🍋🍹 あーー、最高。`,
  nav_title: `あーー、最高。`,
  paragraph_one: `🍋🍹 あーー、最高。`,
},
making_a_payment_eight: {
  title: `もう一杯注文しよう`,
  nav_title: `もう一杯注文`,
  heading_one: `もう一杯注文しよう`,
  paragraph_one: `夜はまだ長いし、今日はバジェットコプターで帰るわけでもない。もう一杯ライトニングレモネードを飲む時間はあるかな？　非対称なトランザクションとリボーク鍵のやり取りにも慣れてきたので、もう一度このプロトコルを実行してみましょう。`,
  paragraph_two: `ラズロに1,000サトシを支払った現在の状態を示す、2つのコミットメントトランザクションがePhone Infinityの画面に表示されています。`,
  heading_two: `手順`,
  list_one: `ラズロ用の新しいコミットメントトランザクションの金額と出力スクリプトを更新する`,
  list_two: `そのトランザクションに署名し、ラズロに送る`,
  list_three: `あなた自身のコミットメントトランザクションを更新する：ラズロは前の状態を取り消すために、<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">REVOCATION_LASZLO_1</span> をあなたに送ってきます。金額と出力スクリプトを更新しましょう。`,
  list_four: `あなたのトランザクションをラズロに送り、署名してもらう`,
  list_five: `ラズロの署名を受け取ったら、前回のリボーク鍵 <span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base">REVOCATION_YOU_2</span> を彼に送る`,
  paragraph_three: `では、どうぞ🍋🍹`,
  heading_three: `ヒント`,
  paragraph_four: `マイナー手数料として1,000サトシを確保するのを忘れずに`,
  paragraph_five: `出力0は次のいずれかで使用されます：`,
  step_one: {
    hint_one: `700ブロック後にラズロが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(LASZLO) 1</span>`,
    hint_two: `あなたが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_LASZLO_2) SIG(YOU) 0</span>`,
    hint_three: `出力1はあなたが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU)</span>`,
  },
  step_two: {
    hint_one: `700ブロック後にあなたが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(YOU) 1</span>`,
    hint_two: `ラズロが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">0 SIG(REVOCATION_YOU_3) SIG(LASZLO) 0</span>`,
    hint_three: `出力1はラズロが使用：<span class="rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-base whitespace-nowrap">SIG(LASZLO)</span>`,
  },
},
      
outro_one: {
  title: `アウトロ`,
  nav_title: `夜通し続けよう`,
  paragraph_one: `一晩中でもできるぞ！🍋🍹　まあ、10万サトシが全部ラズロに送られちゃうまでだけどね。`,
  paragraph_two: `水を飲むのも忘れないで！ホットドッグ（ホロドッグ）とナチョスもあるよ。`,
},

outro_two: {
  title: `アウトロ`,
  nav_title: `家路につく`,
  paragraph_one: `長くて不思議な一日を終え、あなたは飲み物の代金を払って家路につきます。3Dプリントのバンガローのドアを開けると──おっと、またヴァンダープール！？　これは現実？　それともメンプール・マルガリータを飲みすぎたせい？　ホロキャットたちを従えて現れた彼ですが、今回は争うつもりはないようです。`,
  paragraph_two: `—ヴァンダープール：「私たちは互いのことをよく知らないが……『見知らぬ者同士でも、運命は交差するものだ』と、祖父はよく言っていたものだ。聞いてほしい——サトシ・ナカモトの件は全部、家業を守るためだったんだ。マイニングが私たちにとってどれだけ大切だったか、君にはきっと、想像もつかないだろう。変化を受け入れる覚悟ができてなかったんだ。現状を保ちたかった、ただ、それだけなんだ。」`,
},

outro_three: {
  title: `アウトロ`,
  nav_title: `ビットコイン・コミュニティ`,
  paragraph_one: `あなたは彼に尋ねます。どうしてサトシ・ナカモトという名前にこだわったのか、と。`,
  paragraph_two: `—ヴァンダープール：「BitRayやヴァンダープールよりも大きな名前は、ビットコインの中ではサトシ・ナカモトだけだった。昔、サトシ・ナカモトの名を使った誰かが言っていた──ビットコインは、もう何世代も前に創造者の手を離れているってな。だからこそ私は、ヴァンダープールの名を救うために、より大きな名を手に入れようとしたんだ。新しいコインを発行するスリル、それは当時の私にとって魔法だった。今でもそう思ってるよ。」`,
  paragraph_three: `—ヴァンダープール：「でも今なら分かる。たとえ俺がサトシの曾孫だったとしても、ビットコインを定義するのはリーダーじゃない。コミュニティなんだ。サトシですら、ビットコインを変えることはできなかった。それこそが、ビットコインの偉大さの源であり、ビットコインを真似た何百万ものコインが長続きしなかった理由なんだ。」`,
},

outro_four: {
  title: `アウトロ`,
  nav_title: `ヴァンダープールの葛藤`,
  paragraph_one: `ヴァンダープールはあなたのホロキャットを抱き上げます。ホロキャットは喉をゴロゴロ鳴らし始めました。人間は複雑な存在──ホログラムでもそうでなくても、猫はそれを誰よりもよく知っています。`,
  paragraph_two: `—ホロキャット：「あなたは根っからの悪人じゃないニャ、ヴァンダープールさん。でも、もしかしたら……ちょっと気にしすぎたのかもしれないニャン。」`,
  paragraph_three: `—ヴァンダープール：「まったく、その通りだな。」`,
},

outro_five: {
  title: `アウトロ`,
  nav_title: `やり遂げた！！`,
  heading_one: `やり遂げた！！`,
  paragraph_one: `かつてのサトシのように、あなたも“無名”でした──でも、あなたのアイデアには価値があり、人々はそれに共感しました。サトシはもういませんが、その精神と理念は今も生きています。ビットコイン開発のスキル、健全な謙虚さ、そして古き良き粘り強さを手に入れたあなたは、このエレガントなシステム──パーミッションレスで検閲耐性のあるお金で世界をつないできたこの仕組みに、持続的な足跡を残せる存在です。コードとアイデアの自由市場で、新たな冒険があなたを待っています。ビットコインが生き続けるのは、あなたのような人々が、自分にできる貢献をしているからこそ。だからこそ──私たちは皆、サトシなのです。`,
},

outro_six: {
  title: `Saving Satoshiのその先へ`,
  nav_title: `Saving Satoshiを越えて`,
  heading: `ビットコインにはまだ、あなたの力が必要です……`,
  paragraph_one: `2139年なんて遠い未来に思えるかもしれません。でもビットコインの使命──「公正で、オープンで、誠実な通貨を作ること」は、時代を超えたテーマです。このビジョンを実現するには、あらゆる人の力が必要です。あなたも、もちろんその一人。`,
  paragraph_two: `あなたは、ビットコインを理解していることを証明しました。今こそ、その知識を行動に変える絶好のチャンス。人類史上最も重要な技術のひとつに、貢献してみませんか？`,
  paragraph_three: `<Link className="underline" href="https://bitcoindevs.xyz/">Bitcoin Dev Project</Link> は、次世代のオープンソース開発者を導くためのプロジェクトです。ビットコインのヒーローになるまで、あとワンクリック。`,
  paragraph_four: `私たちは皆、サトシです。`,
},
tab_data: {
  signed: `署名済み`,
  pending: `保留中`,
  deposit: `これはあなたのウォレットにある101,000サトシの出力で、ラズロとのオフチェーン支払いに使用するものです。`,
  payment: `これはラズロへのオフチェーン支払いです。`,
  multisig: `このトランザクションは、あなたとラズロの間のマルチシグ出力に資金を提供します。`,
  refund_0: `このトランザクションは、ラズロが姿を消しても資金が失われないようにします。`,
  refund_1: `このトランザクションは、ラズロが姿を消しても資金が失われないようにします。また、あなたがライトニング・レモネードを支払ったあとにこのトランザクションをブロードキャストしないことをラズロに保証します。`,
  refund_2: `このトランザクションは、ラズロが姿を消しても資金が失われないようにします。また、ライトニング・レモネードの支払い後にすぐに資金を引き出すのを防ぎます。もし支払いに使った1,000サトシも含めて全額返金を試みた場合、700ブロックの遅延によってラズロに気づく猶予が数日与えられます。`,
  commitment_you: `これはこのペイメントチャネルにおける2つ目のコミットメントトランザクションで、ラズロに1,000サトシを支払う内容です。`,
  commitment_laszlo: `これはラズロ側のバージョンのコミットメントトランザクションです。`,
},
resources: {
  output_zero_sig: `出力0の署名`,
  output_one_sig: `出力1の署名`,
  sats_distribution: `ラズロはライトニング・レモネード代として十分なサトシを受け取るべきで、1,000サトシのマイナー手数料を負担する必要はありません。この手数料はあなたのおつりから差し引かれます。`,
  output_script: `出力のロックスクリプトには、署名（例：<span className="rounded-sm px-1.5 py-1 font-mono bg-[#0000004D] m-1 text-base whitespace-nowrap">OP_PUSH SIG()</span>）を含めないようにしてください。もしスクリプトに含まれている場合は、削除してください。`,
  miner_fees_basic: `マイナー手数料として1,000サトシを確保するのを忘れずに。`,
  miner_fees: `おつりから1,000サトシをマイナー手数料として確保するのを忘れずに。`,
  },
},

///CHALLENGE PAGE
challenge_list: {
  coming_soon: `近日公開。お楽しみに。`,
},

chapter: {
  chapter_locked_one: `このチャプターを`,
  chapter_locked_two: `完了してロックを解除しましょう。`,
  coming_soon: `近日公開。お楽しみに。`,
  description: `サトシの謎を探りながら、ビットコインについて学びましょう。`,
},

hero: {
  title: `Saving Satoshi`,
  description: `ビットコインの謎をコードで解き明かそう。`,
  start_journey: `はじめる`,
  tell_more: `もっと詳しく`,
},

footer: {
  paragraph_one: `ビットコインコミュニティによるオープンソース制作です。`,
  link: `コードを確認する`,
},

navbar: {
  intro: `イントロ`,
  chapter: `章`,
  chapter_complete: `完了`,
  challenge: `チャレンジ`,
  help_tooltip: `助けが必要？`,
  your_language: `言語を選ぶ`,
},

modal_signin: {
  heading: `サインイン`,
  pre_signin_paragraph_one: `以下に復元コードを入力すると、アカウントと進行状況を復元できます。`,
  post_signin_paragraph_one: `サトシを救うために戻ってきてくれて嬉しいです！ここから前回のレッスンに直接進めます。`,
  prompt: `復元コードを入力`,
  confirm: `サインイン`,
  create_account: `アカウント作成はこちら`,
  login: `ログイン`,
  welcome_back: `おかえりなさい！`,
  progress_redirect: `前回の続きへ進む`,
},

modal_logout: {
  heading: `ログイン中です`,
  paragraph_one: `このセッションは、下のボタンでサインアウトするまで有効です。`,
  private_key: `あなたの復元コード`,
  signout: `サインアウト`,
},

modal_signup: {
  heading: `進行状況を保存`,
  paragraph_one: `進行状況を保存・読み込むためのシンプルなコードをコピー＆保管してください。すでにコードをお持ちの場合は、ここで読み込めます。`,
  subheading_one: `アバターを選ぼう`,
  subheading_two: `復元コードをバックアップしよう`,
  generate: `準備はできましたか？このコードは失くすと復元できないため、必ず保存してください。`,
  confirm: `完了`,
  acknowledged: `復元コードを保存し、今後のチャレンジで必要になることを理解しました。`,
},

difficulty_selection: {
  NORMAL: `ハードモードを有効にすると、チャレンジの難易度が上がります。`,
  HARD: `ハードモードを無効にすると、チャレンジの難易度が下がります。`,
},

social: {
  twitter_share: `Xで共有`,
  nostr_share: `nostrで共有`,
  sharing: `共有中…`,
  shared: `共有しました！`,
  share_error: `共有に失敗しました`,
},

disclaimer: {
  description: `さあ、始めましょう！一部のチャレンジでは基本的なプログラミング知識が必要です（ヒントあり）。ぜひ挑戦して、<Link href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform?usp=sf_link" className="underline">フィードバック</Link>をお寄せください。`,
},

opcode: {
  run: `スクリプトを実行`,
  reset: `リセット`,
},

status_bar: {
  begin_message: `上のチャレンジをクリアして先に進もう…`,
  error_message: `うーん…まだ少し違うようです…`,
  in_progress_message: `ここまでは順調ですね…`,
  success_message: `よくできました！`,
  next_step_message: `バッチリです。次のステップに進みましょう。`,
  im_stuck: `つまずいた`,
  try_again: `もう一度試す`,
  next: `次へ`,
  skip_challenge_first: `最初のチャレンジに進もう！`,
  skip_challenge_last: `最後のチャレンジに進もう！`,
},

hasher: {
  placeholder: `ここに入力…`,
  return_hash: `入力した内容が下にハッシュとして表示されます`,
},

hashrate: {
  start: `開始`,
  running: `実行中`,
  blocks_found: `見つかったブロック数`,
  hashrate: `ハッシュレート`,
  partial_solutions: `部分的な解`,
},

runner: {
  run: `スクリプトを実行`,
  running: `実行中`,
  pause: `一時停止`,
  result: `結果`,
  computing: `計算中…`,
  evaluation: `評価`,
  script_output: `スクリプトの出力`,
  waiting: `上に入力されるのを待っています…`,
  poor: `これは有効なコードですが、求めている内容とは少し違います。もう一度挑戦してみてください。`,
  good: `よくできています！完璧とは言えませんが、正解として認められます。このまま続けるか、さらに改善するかはあなた次第です。`,
  success: `素晴らしい！コードは完璧です！`,
  language_tabs: {
    locked: `この章を別の言語で始めたため、この言語は使用できません`,
    reset: `ターミナルをリセット`,
  },
},
notfound: {
  first: `あれっ…ここはどこ？`,
  second: `この場所がどこで何なのか、はっきりしません。`,
  third: `宇宙（か時間）に迷い込んでしまったのかもしれません。`,
  back_safety: `安全な場所に戻る`,
}
error: {
  first: `何かがおかしいようです！`,
  second: `ホロキャットがまたケーブルをかじったのかもしれません。いたずらっ子ですね！`,
  reload: `再試行`,
},
help_page: {
  main_heading: `学習リソース`,
  main_subheading: `さらなる学びのために、どんな情報やリソースを提供できるでしょうか？`,
  tips_heading: `ヒント`,
  tips_subheading: `行き詰まったときに、どんなヒントを提供したいですか／できますか？`,
  spoilers_heading: `ネタバレ`,
  spoilers_confirm: `はい、答えを見たいです`,
  pseudo_confirm: `はい、擬似コードを見たいです`,
  solution: `このチャレンジの解答`,
  pseudo_solution: `このチャレンジの擬似コードによる解答`,
  solution_one: `このチャレンジの前半部分の解答`,
  feedback: `フィードバックは非常に貴重です。今後の改善のために、<a href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform" target="_blank" rel="noreferrer">こちらのリンク</a>からご意見をお寄せください。`,
  help_suggestion: `もし行き詰まったら、画面右上の「？」ボタンを押してください。役立つリソースやヒントが表示されます。`,
  },
}    
export default translations
